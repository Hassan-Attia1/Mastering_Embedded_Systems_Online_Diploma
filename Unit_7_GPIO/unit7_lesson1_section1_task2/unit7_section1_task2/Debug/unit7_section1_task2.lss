
unit7_section1_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000592  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051e  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c9  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f1  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  0000115d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001181  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <gpio_init>:
#define ReadBit(reg,bit)	((reg>>bit) & 1)

void gpio_init(void){
	
//setting D0 to be input pull-down
	ResetBit(DDRD,0);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	81 bb       	out	0x11, r24	; 17
	ResetBit(PORTD,0);
  72:	82 b3       	in	r24, 0x12	; 18
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	82 bb       	out	0x12, r24	; 18
	
//setting D5,D6,D7 to be output(source or push)
	SetBit(DDRD,5);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	81 bb       	out	0x11, r24	; 17
	SetBit(DDRD,6);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 64       	ori	r24, 0x40	; 64
  82:	81 bb       	out	0x11, r24	; 17
	SetBit(DDRD,7);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	80 68       	ori	r24, 0x80	; 128
  88:	81 bb       	out	0x11, r24	; 17
  8a:	08 95       	ret

0000008c <main>:
 


int main(void)
{	
	gpio_init();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <gpio_init>
     int counter = 0;
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0xe>
			
			while(ReadBit(PIND,0) == 1){}
			
				counter ++;
				if(counter>2)
				counter =0;
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
     int counter = 0;
	
	
    while (1) 
    {	
		if(ReadBit(PIND,0) == 1){
  9a:	80 9b       	sbis	0x10, 0	; 16
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0xe>
			
			
			if(counter == 0 )
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	29 f4       	brne	.+10     	; 0xac <main+0x20>
			ToggleBit(PORTD,5);
  a2:	32 b3       	in	r19, 0x12	; 18
  a4:	20 e2       	ldi	r18, 0x20	; 32
  a6:	23 27       	eor	r18, r19
  a8:	22 bb       	out	0x12, r18	; 18
  aa:	0b c0       	rjmp	.+22     	; 0xc2 <main+0x36>
			else if(counter == 1)
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	91 05       	cpc	r25, r1
  b0:	29 f4       	brne	.+10     	; 0xbc <main+0x30>
			ToggleBit(PORTD,6);
  b2:	32 b3       	in	r19, 0x12	; 18
  b4:	20 e4       	ldi	r18, 0x40	; 64
  b6:	23 27       	eor	r18, r19
  b8:	22 bb       	out	0x12, r18	; 18
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <main+0x36>
			else
			ToggleBit(PORTD,7);
  bc:	22 b3       	in	r18, 0x12	; 18
  be:	20 58       	subi	r18, 0x80	; 128
  c0:	22 bb       	out	0x12, r18	; 18
			
			
			while(ReadBit(PIND,0) == 1){}
  c2:	80 99       	sbic	0x10, 0	; 16
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <main+0x36>
			
				counter ++;
  c6:	01 96       	adiw	r24, 0x01	; 1
				if(counter>2)
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	91 05       	cpc	r25, r1
  cc:	24 f7       	brge	.-56     	; 0x96 <main+0xa>
  ce:	e5 cf       	rjmp	.-54     	; 0x9a <main+0xe>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
