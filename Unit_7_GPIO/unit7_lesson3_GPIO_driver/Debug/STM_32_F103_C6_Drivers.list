
STM_32_F103_C6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000500  08000508  00010508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000500  08000500  00010508  2**0
                  CONTENTS
  4 .ARM          00000000  08000500  08000500  00010508  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000500  08000508  00010508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000500  08000500  00010500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000504  08000504  00010504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000508  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000508  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000196c  00000000  00000000  00010531  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003f5  00000000  00000000  00011e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  00012292  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  000126e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  000127a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b0a  00000000  00000000  00012838  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000cd2  00000000  00000000  00014342  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000772a  00000000  00000000  00015014  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c73e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001c7bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004e8 	.word	0x080004e8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004e8 	.word	0x080004e8

08000170 <Get_CRLH_Position>:





uint8_t Get_CRLH_Position(uint16_t	PinNumber){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]


	switch(PinNumber){
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <Get_CRLH_Position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <Get_CRLH_Position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <Get_CRLH_Position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_Position+0x7a>
 8000198:	e047      	b.n	800022a <Get_CRLH_Position+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <Get_CRLH_Position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 80001a6:	e040      	b.n	800022a <Get_CRLH_Position+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <Get_CRLH_Position+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <Get_CRLH_Position+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <Get_CRLH_Position+0x9a>
 80001c6:	e030      	b.n	800022a <Get_CRLH_Position+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <Get_CRLH_Position+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001da:	e026      	b.n	800022a <Get_CRLH_Position+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <Get_CRLH_Position+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001e8:	e01f      	b.n	800022a <Get_CRLH_Position+0xba>


	case GPIO_PINS_0:
		return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_1:
		return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_2:
		return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_3:
		return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_4:
		return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_5:
		return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_6:
		return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_7:
		return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_8:
		return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_9:
		return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_10:
		return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_11:
		return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_12:
		return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_13:
		return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_14:
		return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_15:
		return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <Get_CRLH_Position+0xbc>


	}


	return 0;
 800022a:	2300      	movs	r3, #0




}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <MCAL_GPIO_INIT>:





void MCAL_GPIO_INIT (GPIO_typedef* GPIOx, GPIO_PinConfig_t* PinConfig){
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) : Configure pins from 0>>>7
	//Port configuration register low (GPIOx_CRH) : Configure pins from 8>>>15
	volatile	uint32_t* Config_Register = NULL;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_config ;
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PINS_8)?	&GPIOx->CRL : &GPIOx->CRH;
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	2bff      	cmp	r3, #255	; 0xff
 800024a:	d801      	bhi.n	8000250 <MCAL_GPIO_INIT+0x1a>
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	e001      	b.n	8000254 <MCAL_GPIO_INIT+0x1e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3304      	adds	r3, #4
 8000254:	60bb      	str	r3, [r7, #8]
	(*Config_Register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	4618      	mov	r0, r3
 800025c:	f7ff ff88 	bl	8000170 <Get_CRLH_Position>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	230f      	movs	r3, #15
 8000266:	4093      	lsls	r3, r2
 8000268:	43da      	mvns	r2, r3
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	401a      	ands	r2, r3
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	601a      	str	r2, [r3, #0]


	if((PinConfig->GPIO_Pin_Config == GPIO_CONFIG_Output_PP)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Output_OD)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Alternate_Output_OD)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Alternate_Output_PP))
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	789b      	ldrb	r3, [r3, #2]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d00b      	beq.n	8000294 <MCAL_GPIO_INIT+0x5e>
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	789b      	ldrb	r3, [r3, #2]
 8000280:	2b05      	cmp	r3, #5
 8000282:	d007      	beq.n	8000294 <MCAL_GPIO_INIT+0x5e>
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	789b      	ldrb	r3, [r3, #2]
 8000288:	2b07      	cmp	r3, #7
 800028a:	d003      	beq.n	8000294 <MCAL_GPIO_INIT+0x5e>
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	789b      	ldrb	r3, [r3, #2]
 8000290:	2b06      	cmp	r3, #6
 8000292:	d11c      	bne.n	80002ce <MCAL_GPIO_INIT+0x98>
	{
		//(Mode - 4) = true configuration position in data sheet --> see @ref GPIO_CONFIG_define and datasheet difference
		Pin_config = ( ( ( (PinConfig->GPIO_Pin_Config - 4 ) << 2 ) | (PinConfig->GPIO_Mode_config)) & 0x0F );
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	789b      	ldrb	r3, [r3, #2]
 8000298:	3b04      	subs	r3, #4
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	b25a      	sxtb	r2, r3
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	78db      	ldrb	r3, [r3, #3]
 80002a2:	b25b      	sxtb	r3, r3
 80002a4:	4313      	orrs	r3, r2
 80002a6:	b25b      	sxtb	r3, r3
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	f003 030f 	and.w	r3, r3, #15
 80002ae:	73fb      	strb	r3, [r7, #15]
		(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80002b0:	7bfc      	ldrb	r4, [r7, #15]
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ff5a 	bl	8000170 <Get_CRLH_Position>
 80002bc:	4603      	mov	r3, r0
 80002be:	fa04 f203 	lsl.w	r2, r4, r3
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	431a      	orrs	r2, r3
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	e070      	b.n	80003b0 <MCAL_GPIO_INIT+0x17a>
	}

	else
	{

		if((PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Floating_Input) || (PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Analog))
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	789b      	ldrb	r3, [r3, #2]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d003      	beq.n	80002de <MCAL_GPIO_INIT+0xa8>
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	789b      	ldrb	r3, [r3, #2]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d115      	bne.n	800030a <MCAL_GPIO_INIT+0xd4>
		{
			Pin_config = ((((PinConfig -> GPIO_Pin_Config) << 2) | (0)) & 0x0F );
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80002ec:	7bfc      	ldrb	r4, [r7, #15]
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	881b      	ldrh	r3, [r3, #0]
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff3c 	bl	8000170 <Get_CRLH_Position>
 80002f8:	4603      	mov	r3, r0
 80002fa:	fa04 f203 	lsl.w	r2, r4, r3
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	431a      	orrs	r2, r3
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	e052      	b.n	80003b0 <MCAL_GPIO_INIT+0x17a>

		}
		else if((PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Input_PU)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Input_PD ))
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	789b      	ldrb	r3, [r3, #2]
 800030e:	2b02      	cmp	r3, #2
 8000310:	d003      	beq.n	800031a <MCAL_GPIO_INIT+0xe4>
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	789b      	ldrb	r3, [r3, #2]
 8000316:	2b03      	cmp	r3, #3
 8000318:	d135      	bne.n	8000386 <MCAL_GPIO_INIT+0x150>
		{
			switch(PinConfig->GPIO_Pin_Config)
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	789b      	ldrb	r3, [r3, #2]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d002      	beq.n	8000328 <MCAL_GPIO_INIT+0xf2>
 8000322:	2b03      	cmp	r3, #3
 8000324:	d00f      	beq.n	8000346 <MCAL_GPIO_INIT+0x110>
 8000326:	e01f      	b.n	8000368 <MCAL_GPIO_INIT+0x132>
			{
			case  GPIO_CONFIG_Input_PU :
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	683a      	ldr	r2, [r7, #0]
 800032e:	8812      	ldrh	r2, [r2, #0]
 8000330:	431a      	orrs	r2, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	60da      	str	r2, [r3, #12]
				Pin_config = (((PinConfig->GPIO_Pin_Config << 2 )|(0))&0x0F);
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	789b      	ldrb	r3, [r3, #2]
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	b2db      	uxtb	r3, r3
 800033e:	f003 030f 	and.w	r3, r3, #15
 8000342:	73fb      	strb	r3, [r7, #15]
				break;
 8000344:	e010      	b.n	8000368 <MCAL_GPIO_INIT+0x132>
			case GPIO_CONFIG_Input_PD :
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	8812      	ldrh	r2, [r2, #0]
 800034e:	43d2      	mvns	r2, r2
 8000350:	401a      	ands	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	60da      	str	r2, [r3, #12]
				Pin_config = ((((PinConfig->GPIO_Pin_Config-1) << 2 )|(0))&0x0F);
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	789b      	ldrb	r3, [r3, #2]
 800035a:	3b01      	subs	r3, #1
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	b2db      	uxtb	r3, r3
 8000360:	f003 030f 	and.w	r3, r3, #15
 8000364:	73fb      	strb	r3, [r7, #15]
				break;
 8000366:	bf00      	nop


			}

			( *Config_Register ) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000368:	7bfc      	ldrb	r4, [r7, #15]
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff fefe 	bl	8000170 <Get_CRLH_Position>
 8000374:	4603      	mov	r3, r0
 8000376:	fa04 f203 	lsl.w	r2, r4, r3
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	431a      	orrs	r2, r3
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	e014      	b.n	80003b0 <MCAL_GPIO_INIT+0x17a>

		}
		else
		{
			Pin_config = ( ((PinConfig->GPIO_Pin_Config << 2) | (0)) & 0x0F	);
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	789b      	ldrb	r3, [r3, #2]
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	b2db      	uxtb	r3, r3
 800038e:	f003 030f 	and.w	r3, r3, #15
 8000392:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000394:	7bfc      	ldrb	r4, [r7, #15]
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fee8 	bl	8000170 <Get_CRLH_Position>
 80003a0:	4603      	mov	r3, r0
 80003a2:	fa04 f203 	lsl.w	r2, r4, r3
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	431a      	orrs	r2, r3
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	601a      	str	r2, [r3, #0]
	}

	 */


}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd90      	pop	{r4, r7, pc}

080003b8 <GPIO_init>:


#include "stm32_F103C6_gpio_driver.h"
#include "stm32f103x6.h"

void GPIO_init(void){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 		 MCAL_GPIO_INIT(GPIOB, &pinCfg);


	 */

	pinCfg.GPIO_PinNumber = GPIO_PINS_0;
 80003be:	2301      	movs	r3, #1
 80003c0:	80bb      	strh	r3, [r7, #4]
	pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Floating_Input;
 80003c2:	2301      	movs	r3, #1
 80003c4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &pinCfg);
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4619      	mov	r1, r3
 80003ca:	4811      	ldr	r0, [pc, #68]	; (8000410 <GPIO_init+0x58>)
 80003cc:	f7ff ff33 	bl	8000236 <MCAL_GPIO_INIT>

	pinCfg.GPIO_PinNumber = GPIO_PINS_1;
 80003d0:	2302      	movs	r3, #2
 80003d2:	80bb      	strh	r3, [r7, #4]
	pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Input_PD;
 80003d4:	2303      	movs	r3, #3
 80003d6:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &pinCfg);
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <GPIO_init+0x58>)
 80003de:	f7ff ff2a 	bl	8000236 <MCAL_GPIO_INIT>

	pinCfg.GPIO_PinNumber = GPIO_PINS_2;
 80003e2:	2304      	movs	r3, #4
 80003e4:	80bb      	strh	r3, [r7, #4]
	pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Input_PU;
 80003e6:	2302      	movs	r3, #2
 80003e8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &pinCfg);
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4808      	ldr	r0, [pc, #32]	; (8000410 <GPIO_init+0x58>)
 80003f0:	f7ff ff21 	bl	8000236 <MCAL_GPIO_INIT>

	pinCfg.GPIO_PinNumber = GPIO_PINS_3;
 80003f4:	2308      	movs	r3, #8
 80003f6:	80bb      	strh	r3, [r7, #4]
	pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Analog;
 80003f8:	2300      	movs	r3, #0
 80003fa:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &pinCfg);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4619      	mov	r1, r3
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <GPIO_init+0x58>)
 8000402:	f7ff ff18 	bl	8000236 <MCAL_GPIO_INIT>



}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40010800 	.word	0x40010800

08000414 <clock_init>:


}


void clock_init(void){
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0


	//enabling clock for GPIO port A

	RCC_GPIOA_CLK_EN();
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <clock_init+0x24>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a06      	ldr	r2, [pc, #24]	; (8000438 <clock_init+0x24>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
	//RCC_APB2ENR |= (1 << 2);
	//enabling clock for GPIO port B
	RCC_GPIOB_CLK_EN();
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <clock_init+0x24>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a03      	ldr	r2, [pc, #12]	; (8000438 <clock_init+0x24>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
	//RCC_APB2ENR |= (1 << 3);



}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000

0800043c <main>:

int main(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	clock_init();
 8000440:	f7ff ffe8 	bl	8000414 <clock_init>
	GPIO_init();
 8000444:	f7ff ffb8 	bl	80003b8 <GPIO_init>


	}

	 */
while(1){};
 8000448:	e7fe      	b.n	8000448 <main+0xc>
	...

0800044c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800044c:	480d      	ldr	r0, [pc, #52]	; (8000484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000450:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000454:	480c      	ldr	r0, [pc, #48]	; (8000488 <LoopForever+0x6>)
  ldr r1, =_edata
 8000456:	490d      	ldr	r1, [pc, #52]	; (800048c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000458:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <LoopForever+0xe>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800046c:	4c0a      	ldr	r4, [pc, #40]	; (8000498 <LoopForever+0x16>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047a:	f000 f811 	bl	80004a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff ffdd 	bl	800043c <main>

08000482 <LoopForever>:

LoopForever:
    b LoopForever
 8000482:	e7fe      	b.n	8000482 <LoopForever>
  ldr   r0, =_estack
 8000484:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000490:	08000508 	.word	0x08000508
  ldr r2, =_sbss
 8000494:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000498:	2000001c 	.word	0x2000001c

0800049c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC1_2_IRQHandler>
	...

080004a0 <__libc_init_array>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	2500      	movs	r5, #0
 80004a4:	4e0c      	ldr	r6, [pc, #48]	; (80004d8 <__libc_init_array+0x38>)
 80004a6:	4c0d      	ldr	r4, [pc, #52]	; (80004dc <__libc_init_array+0x3c>)
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	10a4      	asrs	r4, r4, #2
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	d109      	bne.n	80004c4 <__libc_init_array+0x24>
 80004b0:	f000 f81a 	bl	80004e8 <_init>
 80004b4:	2500      	movs	r5, #0
 80004b6:	4e0a      	ldr	r6, [pc, #40]	; (80004e0 <__libc_init_array+0x40>)
 80004b8:	4c0a      	ldr	r4, [pc, #40]	; (80004e4 <__libc_init_array+0x44>)
 80004ba:	1ba4      	subs	r4, r4, r6
 80004bc:	10a4      	asrs	r4, r4, #2
 80004be:	42a5      	cmp	r5, r4
 80004c0:	d105      	bne.n	80004ce <__libc_init_array+0x2e>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004c8:	4798      	blx	r3
 80004ca:	3501      	adds	r5, #1
 80004cc:	e7ee      	b.n	80004ac <__libc_init_array+0xc>
 80004ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004d2:	4798      	blx	r3
 80004d4:	3501      	adds	r5, #1
 80004d6:	e7f2      	b.n	80004be <__libc_init_array+0x1e>
 80004d8:	08000500 	.word	0x08000500
 80004dc:	08000500 	.word	0x08000500
 80004e0:	08000500 	.word	0x08000500
 80004e4:	08000504 	.word	0x08000504

080004e8 <_init>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	bf00      	nop
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr

080004f4 <_fini>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr
