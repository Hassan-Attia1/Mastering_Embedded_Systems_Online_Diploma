
Unit7_lesson4_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ee4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001014  08001014  00011014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001040  08001040  00011048  2**0
                  CONTENTS
  4 .ARM          00000000  08001040  08001040  00011048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001040  08001048  00011048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001040  08001040  00011040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001044  08001044  00011044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000000  08001048  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001048  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003396  00000000  00000000  00011071  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000087f  00000000  00000000  00014407  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009c0  00000000  00000000  00014c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00015648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  000157f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002451  00000000  00000000  00015950  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001dd0  00000000  00000000  00017da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009575  00000000  00000000  00019b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000230e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000538  00000000  00000000  00023164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ffc 	.word	0x08000ffc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ffc 	.word	0x08000ffc

08000170 <wait_ms>:

GPIO_PinConfig_t pinCfg;

//***************************Delay Function***********************************

void wait_ms(uint32_t time){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]


	uint32_t i,j;
	for(i=0 ;i<time;i++){
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <wait_ms+0x26>

		for(j=0;j<255;j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <wait_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <wait_ms+0x14>
	for(i=0 ;i<time;i++){
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <wait_ms+0xe>

	}

}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_KICK>:



//***************************KICK FUNCTION***********************************
void LCD_KICK(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	//MCAL_GPIO_WritePin(LCD_CTRL_PORTB, Enable_Switch, GPIO_PIN_RESET);

	
/*
	LCD_CTRL_PORTB |= (1<<Enable_Switch);*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORTB, Enable_Switch, GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <LCD_KICK+0x28>)
 80001b4:	f000 fe46 	bl	8000e44 <MCAL_GPIO_WritePin>
	
	wait_ms(50);
 80001b8:	2032      	movs	r0, #50	; 0x32
 80001ba:	f7ff ffd9 	bl	8000170 <wait_ms>

	MCAL_GPIO_WritePin(LCD_CTRL_PORTB, Enable_Switch, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c4:	4802      	ldr	r0, [pc, #8]	; (80001d0 <LCD_KICK+0x28>)
 80001c6:	f000 fe3d 	bl	8000e44 <MCAL_GPIO_WritePin>
	
}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010800 	.word	0x40010800

080001d4 <LCD_GPIO_init>:

//***************************LCD INIT FUNCTION***********************************

void LCD_GPIO_init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

			//setting control pins(B12->B14) (RS, RW, EN) to be output
			pinCfg.GPIO_PinNumber = RS_Switch;
 80001d8:	4b52      	ldr	r3, [pc, #328]	; (8000324 <LCD_GPIO_init+0x150>)
 80001da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001de:	801a      	strh	r2, [r3, #0]
			pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 80001e0:	4b50      	ldr	r3, [pc, #320]	; (8000324 <LCD_GPIO_init+0x150>)
 80001e2:	2204      	movs	r2, #4
 80001e4:	709a      	strb	r2, [r3, #2]
			pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 80001e6:	4b4f      	ldr	r3, [pc, #316]	; (8000324 <LCD_GPIO_init+0x150>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_INIT(LCD_CTRL_PORTB, &pinCfg);
 80001ec:	494d      	ldr	r1, [pc, #308]	; (8000324 <LCD_GPIO_init+0x150>)
 80001ee:	484e      	ldr	r0, [pc, #312]	; (8000328 <LCD_GPIO_init+0x154>)
 80001f0:	f000 fd5f 	bl	8000cb2 <MCAL_GPIO_INIT>


			pinCfg.GPIO_PinNumber = RW_Switch;
 80001f4:	4b4b      	ldr	r3, [pc, #300]	; (8000324 <LCD_GPIO_init+0x150>)
 80001f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001fa:	801a      	strh	r2, [r3, #0]
			pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 80001fc:	4b49      	ldr	r3, [pc, #292]	; (8000324 <LCD_GPIO_init+0x150>)
 80001fe:	2204      	movs	r2, #4
 8000200:	709a      	strb	r2, [r3, #2]
			pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 8000202:	4b48      	ldr	r3, [pc, #288]	; (8000324 <LCD_GPIO_init+0x150>)
 8000204:	2201      	movs	r2, #1
 8000206:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_INIT(LCD_CTRL_PORTB, &pinCfg);
 8000208:	4946      	ldr	r1, [pc, #280]	; (8000324 <LCD_GPIO_init+0x150>)
 800020a:	4847      	ldr	r0, [pc, #284]	; (8000328 <LCD_GPIO_init+0x154>)
 800020c:	f000 fd51 	bl	8000cb2 <MCAL_GPIO_INIT>

			pinCfg.GPIO_PinNumber = Enable_Switch;
 8000210:	4b44      	ldr	r3, [pc, #272]	; (8000324 <LCD_GPIO_init+0x150>)
 8000212:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000216:	801a      	strh	r2, [r3, #0]
			pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 8000218:	4b42      	ldr	r3, [pc, #264]	; (8000324 <LCD_GPIO_init+0x150>)
 800021a:	2204      	movs	r2, #4
 800021c:	709a      	strb	r2, [r3, #2]
			pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 800021e:	4b41      	ldr	r3, [pc, #260]	; (8000324 <LCD_GPIO_init+0x150>)
 8000220:	2201      	movs	r2, #1
 8000222:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_INIT(LCD_CTRL_PORTB, &pinCfg);
 8000224:	493f      	ldr	r1, [pc, #252]	; (8000324 <LCD_GPIO_init+0x150>)
 8000226:	4840      	ldr	r0, [pc, #256]	; (8000328 <LCD_GPIO_init+0x154>)
 8000228:	f000 fd43 	bl	8000cb2 <MCAL_GPIO_INIT>


			//Setting Pin 0->7 to be output with 10Mhz speed for LCD DATA D0->D7
			pinCfg.GPIO_PinNumber = LCD_D0_PIN;
 800022c:	4b3d      	ldr	r3, [pc, #244]	; (8000324 <LCD_GPIO_init+0x150>)
 800022e:	2201      	movs	r2, #1
 8000230:	801a      	strh	r2, [r3, #0]
			pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 8000232:	4b3c      	ldr	r3, [pc, #240]	; (8000324 <LCD_GPIO_init+0x150>)
 8000234:	2204      	movs	r2, #4
 8000236:	709a      	strb	r2, [r3, #2]
			pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 8000238:	4b3a      	ldr	r3, [pc, #232]	; (8000324 <LCD_GPIO_init+0x150>)
 800023a:	2201      	movs	r2, #1
 800023c:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_INIT(LCD_PORTA, &pinCfg);
 800023e:	4939      	ldr	r1, [pc, #228]	; (8000324 <LCD_GPIO_init+0x150>)
 8000240:	4839      	ldr	r0, [pc, #228]	; (8000328 <LCD_GPIO_init+0x154>)
 8000242:	f000 fd36 	bl	8000cb2 <MCAL_GPIO_INIT>

			pinCfg.GPIO_PinNumber =	LCD_D1_PIN;
 8000246:	4b37      	ldr	r3, [pc, #220]	; (8000324 <LCD_GPIO_init+0x150>)
 8000248:	2202      	movs	r2, #2
 800024a:	801a      	strh	r2, [r3, #0]
			pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 800024c:	4b35      	ldr	r3, [pc, #212]	; (8000324 <LCD_GPIO_init+0x150>)
 800024e:	2204      	movs	r2, #4
 8000250:	709a      	strb	r2, [r3, #2]
			pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 8000252:	4b34      	ldr	r3, [pc, #208]	; (8000324 <LCD_GPIO_init+0x150>)
 8000254:	2201      	movs	r2, #1
 8000256:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_INIT(LCD_PORTA, &pinCfg);
 8000258:	4932      	ldr	r1, [pc, #200]	; (8000324 <LCD_GPIO_init+0x150>)
 800025a:	4833      	ldr	r0, [pc, #204]	; (8000328 <LCD_GPIO_init+0x154>)
 800025c:	f000 fd29 	bl	8000cb2 <MCAL_GPIO_INIT>


			pinCfg.GPIO_PinNumber = LCD_D2_PIN;
 8000260:	4b30      	ldr	r3, [pc, #192]	; (8000324 <LCD_GPIO_init+0x150>)
 8000262:	2204      	movs	r2, #4
 8000264:	801a      	strh	r2, [r3, #0]
			pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 8000266:	4b2f      	ldr	r3, [pc, #188]	; (8000324 <LCD_GPIO_init+0x150>)
 8000268:	2204      	movs	r2, #4
 800026a:	709a      	strb	r2, [r3, #2]
			pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 800026c:	4b2d      	ldr	r3, [pc, #180]	; (8000324 <LCD_GPIO_init+0x150>)
 800026e:	2201      	movs	r2, #1
 8000270:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_INIT(LCD_PORTA, &pinCfg);
 8000272:	492c      	ldr	r1, [pc, #176]	; (8000324 <LCD_GPIO_init+0x150>)
 8000274:	482c      	ldr	r0, [pc, #176]	; (8000328 <LCD_GPIO_init+0x154>)
 8000276:	f000 fd1c 	bl	8000cb2 <MCAL_GPIO_INIT>


			pinCfg.GPIO_PinNumber = LCD_D3_PIN;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <LCD_GPIO_init+0x150>)
 800027c:	2208      	movs	r2, #8
 800027e:	801a      	strh	r2, [r3, #0]
			pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 8000280:	4b28      	ldr	r3, [pc, #160]	; (8000324 <LCD_GPIO_init+0x150>)
 8000282:	2204      	movs	r2, #4
 8000284:	709a      	strb	r2, [r3, #2]
			pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 8000286:	4b27      	ldr	r3, [pc, #156]	; (8000324 <LCD_GPIO_init+0x150>)
 8000288:	2201      	movs	r2, #1
 800028a:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_INIT(LCD_PORTA, &pinCfg);
 800028c:	4925      	ldr	r1, [pc, #148]	; (8000324 <LCD_GPIO_init+0x150>)
 800028e:	4826      	ldr	r0, [pc, #152]	; (8000328 <LCD_GPIO_init+0x154>)
 8000290:	f000 fd0f 	bl	8000cb2 <MCAL_GPIO_INIT>


			pinCfg.GPIO_PinNumber = LCD_D4_PIN;
 8000294:	4b23      	ldr	r3, [pc, #140]	; (8000324 <LCD_GPIO_init+0x150>)
 8000296:	2210      	movs	r2, #16
 8000298:	801a      	strh	r2, [r3, #0]
			pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 800029a:	4b22      	ldr	r3, [pc, #136]	; (8000324 <LCD_GPIO_init+0x150>)
 800029c:	2204      	movs	r2, #4
 800029e:	709a      	strb	r2, [r3, #2]
			pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 80002a0:	4b20      	ldr	r3, [pc, #128]	; (8000324 <LCD_GPIO_init+0x150>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_INIT(LCD_PORTA, &pinCfg);
 80002a6:	491f      	ldr	r1, [pc, #124]	; (8000324 <LCD_GPIO_init+0x150>)
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <LCD_GPIO_init+0x154>)
 80002aa:	f000 fd02 	bl	8000cb2 <MCAL_GPIO_INIT>


			pinCfg.GPIO_PinNumber = LCD_D5_PIN;
 80002ae:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <LCD_GPIO_init+0x150>)
 80002b0:	2220      	movs	r2, #32
 80002b2:	801a      	strh	r2, [r3, #0]
			pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 80002b4:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <LCD_GPIO_init+0x150>)
 80002b6:	2204      	movs	r2, #4
 80002b8:	709a      	strb	r2, [r3, #2]
			pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 80002ba:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <LCD_GPIO_init+0x150>)
 80002bc:	2201      	movs	r2, #1
 80002be:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_INIT(LCD_PORTA, &pinCfg);
 80002c0:	4918      	ldr	r1, [pc, #96]	; (8000324 <LCD_GPIO_init+0x150>)
 80002c2:	4819      	ldr	r0, [pc, #100]	; (8000328 <LCD_GPIO_init+0x154>)
 80002c4:	f000 fcf5 	bl	8000cb2 <MCAL_GPIO_INIT>


			pinCfg.GPIO_PinNumber = LCD_D6_PIN;
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <LCD_GPIO_init+0x150>)
 80002ca:	2240      	movs	r2, #64	; 0x40
 80002cc:	801a      	strh	r2, [r3, #0]
			pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <LCD_GPIO_init+0x150>)
 80002d0:	2204      	movs	r2, #4
 80002d2:	709a      	strb	r2, [r3, #2]
			pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 80002d4:	4b13      	ldr	r3, [pc, #76]	; (8000324 <LCD_GPIO_init+0x150>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_INIT(LCD_PORTA, &pinCfg);
 80002da:	4912      	ldr	r1, [pc, #72]	; (8000324 <LCD_GPIO_init+0x150>)
 80002dc:	4812      	ldr	r0, [pc, #72]	; (8000328 <LCD_GPIO_init+0x154>)
 80002de:	f000 fce8 	bl	8000cb2 <MCAL_GPIO_INIT>


			pinCfg.GPIO_PinNumber = LCD_D7_PIN;
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <LCD_GPIO_init+0x150>)
 80002e4:	2280      	movs	r2, #128	; 0x80
 80002e6:	801a      	strh	r2, [r3, #0]
			pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <LCD_GPIO_init+0x150>)
 80002ea:	2204      	movs	r2, #4
 80002ec:	709a      	strb	r2, [r3, #2]
			pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <LCD_GPIO_init+0x150>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_INIT(LCD_PORTA, &pinCfg);
 80002f4:	490b      	ldr	r1, [pc, #44]	; (8000324 <LCD_GPIO_init+0x150>)
 80002f6:	480c      	ldr	r0, [pc, #48]	; (8000328 <LCD_GPIO_init+0x154>)
 80002f8:	f000 fcdb 	bl	8000cb2 <MCAL_GPIO_INIT>

			//RS->0 Command
			MCAL_GPIO_WritePin(LCD_CTRL_PORTB, RS_Switch, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000302:	4809      	ldr	r0, [pc, #36]	; (8000328 <LCD_GPIO_init+0x154>)
 8000304:	f000 fd9e 	bl	8000e44 <MCAL_GPIO_WritePin>
			//RW->0 Write
			MCAL_GPIO_WritePin(LCD_CTRL_PORTB, RW_Switch, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030e:	4806      	ldr	r0, [pc, #24]	; (8000328 <LCD_GPIO_init+0x154>)
 8000310:	f000 fd98 	bl	8000e44 <MCAL_GPIO_WritePin>
			//EN->0
			MCAL_GPIO_WritePin(LCD_CTRL_PORTB, Enable_Switch, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031a:	4803      	ldr	r0, [pc, #12]	; (8000328 <LCD_GPIO_init+0x154>)
 800031c:	f000 fd92 	bl	8000e44 <MCAL_GPIO_WritePin>

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000001c 	.word	0x2000001c
 8000328:	40010800 	.word	0x40010800

0800032c <LCD_Init>:
void LCD_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	wait_ms(20);
 8000330:	2014      	movs	r0, #20
 8000332:	f7ff ff1d 	bl	8000170 <wait_ms>
	LCD_GPIO_init();
 8000336:	f7ff ff4d 	bl	80001d4 <LCD_GPIO_init>
	wait_ms(20);
 800033a:	2014      	movs	r0, #20
 800033c:	f7ff ff18 	bl	8000170 <wait_ms>
	LCD_clear_screen();
 8000340:	f000 f80e 	bl	8000360 <LCD_clear_screen>
		
	#ifdef Eight_Bit_MODE

	Write_Command(eight_bit_2Line);
 8000344:	2038      	movs	r0, #56	; 0x38
 8000346:	f000 f813 	bl	8000370 <Write_Command>
	
	#endif

	Write_Command(Entry_mode);
 800034a:	2006      	movs	r0, #6
 800034c:	f000 f810 	bl	8000370 <Write_Command>
	Write_Command(Beginning_first_line);
 8000350:	2080      	movs	r0, #128	; 0x80
 8000352:	f000 f80d 	bl	8000370 <Write_Command>
	Write_Command(Display_on_Curosr_blinking);
 8000356:	200f      	movs	r0, #15
 8000358:	f000 f80a 	bl	8000370 <Write_Command>
	
	
	
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}

08000360 <LCD_clear_screen>:

//***************************LCD CLEAR FUNCTION***********************************

void LCD_clear_screen(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	Write_Command(Clear_display);
 8000364:	2001      	movs	r0, #1
 8000366:	f000 f803 	bl	8000370 <Write_Command>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <Write_Command>:
 
 
 
 //***************************COMMAND FUNCTION***********************************

void Write_Command(unsigned char command){
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
	
	LCD_Busy();
 800037a:	f000 f90b 	bl	8000594 <LCD_Busy>

	 #ifdef Eight_Bit_MODE


	//RS == 0 (command mode)
	MCAL_GPIO_WritePin(LCD_CTRL_PORTB, RS_Switch, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000384:	4832      	ldr	r0, [pc, #200]	; (8000450 <Write_Command+0xe0>)
 8000386:	f000 fd5d 	bl	8000e44 <MCAL_GPIO_WritePin>
	//RW == 0 (Write mode)
	MCAL_GPIO_WritePin(LCD_CTRL_PORTB, RW_Switch, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000390:	482f      	ldr	r0, [pc, #188]	; (8000450 <Write_Command+0xe0>)
 8000392:	f000 fd57 	bl	8000e44 <MCAL_GPIO_WritePin>
	//MCAL_GPIO_WritePort(LCD_PORTA, command<<0);
 	MCAL_GPIO_WritePin(LCD_PORTA, LCD_D0_PIN, checkbit(command,0)  );
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	b2db      	uxtb	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	2101      	movs	r1, #1
 80003a2:	482b      	ldr	r0, [pc, #172]	; (8000450 <Write_Command+0xe0>)
 80003a4:	f000 fd4e 	bl	8000e44 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTA, LCD_D1_PIN, checkbit(command,1)  );
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	085b      	lsrs	r3, r3, #1
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	461a      	mov	r2, r3
 80003b6:	2102      	movs	r1, #2
 80003b8:	4825      	ldr	r0, [pc, #148]	; (8000450 <Write_Command+0xe0>)
 80003ba:	f000 fd43 	bl	8000e44 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTA, LCD_D2_PIN, checkbit(command,2)  );
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	f003 0301 	and.w	r3, r3, #1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	461a      	mov	r2, r3
 80003cc:	2104      	movs	r1, #4
 80003ce:	4820      	ldr	r0, [pc, #128]	; (8000450 <Write_Command+0xe0>)
 80003d0:	f000 fd38 	bl	8000e44 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTA, LCD_D3_PIN, checkbit(command,3)  );
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	08db      	lsrs	r3, r3, #3
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	461a      	mov	r2, r3
 80003e2:	2108      	movs	r1, #8
 80003e4:	481a      	ldr	r0, [pc, #104]	; (8000450 <Write_Command+0xe0>)
 80003e6:	f000 fd2d 	bl	8000e44 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTA, LCD_D4_PIN, checkbit(command,4)  );
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	091b      	lsrs	r3, r3, #4
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	f003 0301 	and.w	r3, r3, #1
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	461a      	mov	r2, r3
 80003f8:	2110      	movs	r1, #16
 80003fa:	4815      	ldr	r0, [pc, #84]	; (8000450 <Write_Command+0xe0>)
 80003fc:	f000 fd22 	bl	8000e44 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTA, LCD_D5_PIN, checkbit(command,5)  );
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	095b      	lsrs	r3, r3, #5
 8000404:	b2db      	uxtb	r3, r3
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	b2db      	uxtb	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	2120      	movs	r1, #32
 8000410:	480f      	ldr	r0, [pc, #60]	; (8000450 <Write_Command+0xe0>)
 8000412:	f000 fd17 	bl	8000e44 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTA, LCD_D6_PIN, checkbit(command,6)  );
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	099b      	lsrs	r3, r3, #6
 800041a:	b2db      	uxtb	r3, r3
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	b2db      	uxtb	r3, r3
 8000422:	461a      	mov	r2, r3
 8000424:	2140      	movs	r1, #64	; 0x40
 8000426:	480a      	ldr	r0, [pc, #40]	; (8000450 <Write_Command+0xe0>)
 8000428:	f000 fd0c 	bl	8000e44 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTA, LCD_D7_PIN, checkbit(command,7)  );
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	09db      	lsrs	r3, r3, #7
 8000430:	b2db      	uxtb	r3, r3
 8000432:	461a      	mov	r2, r3
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	4806      	ldr	r0, [pc, #24]	; (8000450 <Write_Command+0xe0>)
 8000438:	f000 fd04 	bl	8000e44 <MCAL_GPIO_WritePin>

	wait_ms(30);
 800043c:	201e      	movs	r0, #30
 800043e:	f7ff fe97 	bl	8000170 <wait_ms>
	LCD_KICK();
 8000442:	f7ff feb1 	bl	80001a8 <LCD_KICK>
	#endif
	
	
 
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40010800 	.word	0x40010800

08000454 <Write_char>:

//******************************CHARACTER FUNCTION********************************


void Write_char(unsigned char data){
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
	
		#ifdef Eight_Bit_MODE
		LCD_Busy();
 800045e:	f000 f899 	bl	8000594 <LCD_Busy>
//		LCD_PORTA = data; // look at LCD Command Macros & LCD Instruction Set Macros in the header file
//		LCD_CTRL_PORTB |= (1<<RS_Switch);
//		LCD_CTRL_PORTB &= ~((1<<RW_Switch));
*/

		MCAL_GPIO_WritePin(LCD_CTRL_PORTB, RS_Switch, GPIO_PIN_SET);
 8000462:	2201      	movs	r2, #1
 8000464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000468:	4833      	ldr	r0, [pc, #204]	; (8000538 <Write_char+0xe4>)
 800046a:	f000 fceb 	bl	8000e44 <MCAL_GPIO_WritePin>
		//MCAL_GPIO_WritePort(LCD_PORTA, data<<0);
	  	MCAL_GPIO_WritePin(LCD_PORTA, LCD_D0_PIN, checkbit(data,0)  );
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	2101      	movs	r1, #1
 800047a:	482f      	ldr	r0, [pc, #188]	; (8000538 <Write_char+0xe4>)
 800047c:	f000 fce2 	bl	8000e44 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_PORTA, LCD_D1_PIN, checkbit(data,1)  );
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	085b      	lsrs	r3, r3, #1
 8000484:	b2db      	uxtb	r3, r3
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	b2db      	uxtb	r3, r3
 800048c:	461a      	mov	r2, r3
 800048e:	2102      	movs	r1, #2
 8000490:	4829      	ldr	r0, [pc, #164]	; (8000538 <Write_char+0xe4>)
 8000492:	f000 fcd7 	bl	8000e44 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_PORTA, LCD_D2_PIN, checkbit(data,2)  );
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	089b      	lsrs	r3, r3, #2
 800049a:	b2db      	uxtb	r3, r3
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	2104      	movs	r1, #4
 80004a6:	4824      	ldr	r0, [pc, #144]	; (8000538 <Write_char+0xe4>)
 80004a8:	f000 fccc 	bl	8000e44 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_PORTA, LCD_D3_PIN, checkbit(data,3)  );
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	08db      	lsrs	r3, r3, #3
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	2108      	movs	r1, #8
 80004bc:	481e      	ldr	r0, [pc, #120]	; (8000538 <Write_char+0xe4>)
 80004be:	f000 fcc1 	bl	8000e44 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_PORTA, LCD_D4_PIN, checkbit(data,4)  );
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	091b      	lsrs	r3, r3, #4
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	2110      	movs	r1, #16
 80004d2:	4819      	ldr	r0, [pc, #100]	; (8000538 <Write_char+0xe4>)
 80004d4:	f000 fcb6 	bl	8000e44 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_PORTA, LCD_D5_PIN, checkbit(data,5)  );
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	095b      	lsrs	r3, r3, #5
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	2120      	movs	r1, #32
 80004e8:	4813      	ldr	r0, [pc, #76]	; (8000538 <Write_char+0xe4>)
 80004ea:	f000 fcab 	bl	8000e44 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_PORTA, LCD_D6_PIN, checkbit(data,6)  );
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	099b      	lsrs	r3, r3, #6
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	2140      	movs	r1, #64	; 0x40
 80004fe:	480e      	ldr	r0, [pc, #56]	; (8000538 <Write_char+0xe4>)
 8000500:	f000 fca0 	bl	8000e44 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_PORTA, LCD_D7_PIN, checkbit(data,7)  );
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	09db      	lsrs	r3, r3, #7
 8000508:	b2db      	uxtb	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	480a      	ldr	r0, [pc, #40]	; (8000538 <Write_char+0xe4>)
 8000510:	f000 fc98 	bl	8000e44 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(LCD_CTRL_PORTB, RW_Switch, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051a:	4807      	ldr	r0, [pc, #28]	; (8000538 <Write_char+0xe4>)
 800051c:	f000 fc92 	bl	8000e44 <MCAL_GPIO_WritePin>


		LCD_KICK();
 8000520:	f7ff fe42 	bl	80001a8 <LCD_KICK>

		MCAL_GPIO_WritePin(LCD_CTRL_PORTB, RS_Switch, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <Write_char+0xe4>)
 800052c:	f000 fc8a 	bl	8000e44 <MCAL_GPIO_WritePin>
		

	
	
	
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40010800 	.word	0x40010800

0800053c <Write_String>:
	
//*************************STRING FUNCTION*************************************	
	
	
	
void Write_String(char* data){
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	
	int count  = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
	
	while(*data > 0){
 8000548:	e01c      	b.n	8000584 <Write_String+0x48>
		
		
		Write_char(*data++);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ff7e 	bl	8000454 <Write_char>
		
		count++;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
		
		if(count == 16){
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2b10      	cmp	r3, #16
 8000562:	d104      	bne.n	800056e <Write_String+0x32>
			
			LCD_GOTO_XY(2,0);
 8000564:	2100      	movs	r1, #0
 8000566:	2002      	movs	r0, #2
 8000568:	f000 f848 	bl	80005fc <LCD_GOTO_XY>
 800056c:	e00a      	b.n	8000584 <Write_String+0x48>
			
			
		}
		
		else if(count == 32){
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b20      	cmp	r3, #32
 8000572:	d107      	bne.n	8000584 <Write_String+0x48>
			LCD_clear_screen();
 8000574:	f7ff fef4 	bl	8000360 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 8000578:	2100      	movs	r1, #0
 800057a:	2001      	movs	r0, #1
 800057c:	f000 f83e 	bl	80005fc <LCD_GOTO_XY>
			count = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
	while(*data > 0){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1de      	bne.n	800054a <Write_String+0xe>
	
		
	}
 
	
	} 
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <LCD_Busy>:

//****************************BUSY FUNCTION**********************************

void LCD_Busy(void)
{	
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

	 #ifdef  Eight_Bit_MODE



	pinCfg.GPIO_PinNumber = GPIO_PINS_7;
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <LCD_Busy+0x60>)
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Floating_Input;
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <LCD_Busy+0x60>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_PORTA, &pinCfg);
 80005a4:	4913      	ldr	r1, [pc, #76]	; (80005f4 <LCD_Busy+0x60>)
 80005a6:	4814      	ldr	r0, [pc, #80]	; (80005f8 <LCD_Busy+0x64>)
 80005a8:	f000 fb83 	bl	8000cb2 <MCAL_GPIO_INIT>

	#endif
	

		//RW == 1 (READ MODE)
		MCAL_GPIO_WritePin(LCD_CTRL_PORTB, RW_Switch, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b2:	4811      	ldr	r0, [pc, #68]	; (80005f8 <LCD_Busy+0x64>)
 80005b4:	f000 fc46 	bl	8000e44 <MCAL_GPIO_WritePin>
		//RS == 0 (Command Mode)
		MCAL_GPIO_WritePin(LCD_CTRL_PORTB, RS_Switch, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <LCD_Busy+0x64>)
 80005c0:	f000 fc40 	bl	8000e44 <MCAL_GPIO_WritePin>

		//while(MCAL_GPIO_ReadPin(LCD_PORTA, LCD_D7_PIN) & 1);//checking on pin D7 if it's busy or not

		LCD_KICK();
 80005c4:	f7ff fdf0 	bl	80001a8 <LCD_KICK>



	//set D7 to to be output
	pinCfg.GPIO_PinNumber = LCD_D7_PIN;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <LCD_Busy+0x60>)
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	801a      	strh	r2, [r3, #0]
	pinCfg.GPIO_Pin_Config = GPIO_CONFIG_Output_PP;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <LCD_Busy+0x60>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	709a      	strb	r2, [r3, #2]
	pinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <LCD_Busy+0x60>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_PORTA, &pinCfg);
 80005da:	4906      	ldr	r1, [pc, #24]	; (80005f4 <LCD_Busy+0x60>)
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <LCD_Busy+0x64>)
 80005de:	f000 fb68 	bl	8000cb2 <MCAL_GPIO_INIT>

	//RW == 0 (Write Mode)
	MCAL_GPIO_WritePin(LCD_CTRL_PORTB, RW_Switch, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <LCD_Busy+0x64>)
 80005ea:	f000 fc2b 	bl	8000e44 <MCAL_GPIO_WritePin>

	 
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000001c 	.word	0x2000001c
 80005f8:	40010800 	.word	0x40010800

080005fc <LCD_GOTO_XY>:

//*****************************POSITION FUNCTION*********************************

void LCD_GOTO_XY(int line , int position){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
	
	if(line == 1){
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d10d      	bne.n	8000628 <LCD_GOTO_XY+0x2c>
		
		if(position < 16 &&  position >=0){
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2b0f      	cmp	r3, #15
 8000610:	dc1a      	bgt.n	8000648 <LCD_GOTO_XY+0x4c>
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db17      	blt.n	8000648 <LCD_GOTO_XY+0x4c>
			
			Write_Command(Beginning_first_line + position);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	3b80      	subs	r3, #128	; 0x80
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fea5 	bl	8000370 <Write_Command>
	}
	
	
	
	
}
 8000626:	e00f      	b.n	8000648 <LCD_GOTO_XY+0x4c>
	else if(line == 2){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b02      	cmp	r3, #2
 800062c:	d10c      	bne.n	8000648 <LCD_GOTO_XY+0x4c>
		if(position < 32  && position >=0)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2b1f      	cmp	r3, #31
 8000632:	dc09      	bgt.n	8000648 <LCD_GOTO_XY+0x4c>
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	db06      	blt.n	8000648 <LCD_GOTO_XY+0x4c>
		Write_Command(Beginning_second_line + position);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	3b40      	subs	r3, #64	; 0x40
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fe94 	bl	8000370 <Write_Command>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <Enable_NVIC>:



void (* GPTF_IRQ_Callback[16])(void);
void Enable_NVIC(uint16_t IRQ)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	2b0f      	cmp	r3, #15
 800065e:	d853      	bhi.n	8000708 <Enable_NVIC+0xb8>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <Enable_NVIC+0x18>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	080006a9 	.word	0x080006a9
 800066c:	080006b7 	.word	0x080006b7
 8000670:	080006c5 	.word	0x080006c5
 8000674:	080006d3 	.word	0x080006d3
 8000678:	080006df 	.word	0x080006df
 800067c:	080006ed 	.word	0x080006ed
 8000680:	080006ed 	.word	0x080006ed
 8000684:	080006ed 	.word	0x080006ed
 8000688:	080006ed 	.word	0x080006ed
 800068c:	080006ed 	.word	0x080006ed
 8000690:	080006fb 	.word	0x080006fb
 8000694:	080006fb 	.word	0x080006fb
 8000698:	080006fb 	.word	0x080006fb
 800069c:	080006fb 	.word	0x080006fb
 80006a0:	080006fb 	.word	0x080006fb
 80006a4:	080006fb 	.word	0x080006fb
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <Enable_NVIC+0xc4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a19      	ldr	r2, [pc, #100]	; (8000714 <Enable_NVIC+0xc4>)
 80006ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b2:	6013      	str	r3, [r2, #0]
		break;
 80006b4:	e028      	b.n	8000708 <Enable_NVIC+0xb8>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <Enable_NVIC+0xc4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <Enable_NVIC+0xc4>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6013      	str	r3, [r2, #0]
		break;
 80006c2:	e021      	b.n	8000708 <Enable_NVIC+0xb8>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <Enable_NVIC+0xc4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <Enable_NVIC+0xc4>)
 80006ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ce:	6013      	str	r3, [r2, #0]
		break;
 80006d0:	e01a      	b.n	8000708 <Enable_NVIC+0xb8>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <Enable_NVIC+0xc4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <Enable_NVIC+0xc4>)
 80006d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006dc:	6013      	str	r3, [r2, #0]
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <Enable_NVIC+0xc4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <Enable_NVIC+0xc4>)
 80006e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006e8:	6013      	str	r3, [r2, #0]
		break;
 80006ea:	e00d      	b.n	8000708 <Enable_NVIC+0xb8>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <Enable_NVIC+0xc4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a08      	ldr	r2, [pc, #32]	; (8000714 <Enable_NVIC+0xc4>)
 80006f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006f6:	6013      	str	r3, [r2, #0]
		break;
 80006f8:	e006      	b.n	8000708 <Enable_NVIC+0xb8>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <Enable_NVIC+0xc8>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a06      	ldr	r2, [pc, #24]	; (8000718 <Enable_NVIC+0xc8>)
 8000700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000704:	6013      	str	r3, [r2, #0]
		break;
 8000706:	bf00      	nop



	}

}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000e104 	.word	0xe000e104

0800071c <Disable_NVIC>:
void Disable_NVIC(uint16_t IRQ)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	2b0f      	cmp	r3, #15
 800072a:	d853      	bhi.n	80007d4 <Disable_NVIC+0xb8>
 800072c:	a201      	add	r2, pc, #4	; (adr r2, 8000734 <Disable_NVIC+0x18>)
 800072e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000732:	bf00      	nop
 8000734:	08000775 	.word	0x08000775
 8000738:	08000783 	.word	0x08000783
 800073c:	08000791 	.word	0x08000791
 8000740:	0800079f 	.word	0x0800079f
 8000744:	080007ab 	.word	0x080007ab
 8000748:	080007b9 	.word	0x080007b9
 800074c:	080007b9 	.word	0x080007b9
 8000750:	080007b9 	.word	0x080007b9
 8000754:	080007b9 	.word	0x080007b9
 8000758:	080007b9 	.word	0x080007b9
 800075c:	080007c7 	.word	0x080007c7
 8000760:	080007c7 	.word	0x080007c7
 8000764:	080007c7 	.word	0x080007c7
 8000768:	080007c7 	.word	0x080007c7
 800076c:	080007c7 	.word	0x080007c7
 8000770:	080007c7 	.word	0x080007c7
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <Disable_NVIC+0xc4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <Disable_NVIC+0xc4>)
 800077a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077e:	6013      	str	r3, [r2, #0]
		break;
 8000780:	e028      	b.n	80007d4 <Disable_NVIC+0xb8>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <Disable_NVIC+0xc4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <Disable_NVIC+0xc4>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6013      	str	r3, [r2, #0]
		break;
 800078e:	e021      	b.n	80007d4 <Disable_NVIC+0xb8>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <Disable_NVIC+0xc4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <Disable_NVIC+0xc4>)
 8000796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079a:	6013      	str	r3, [r2, #0]
		break;
 800079c:	e01a      	b.n	80007d4 <Disable_NVIC+0xb8>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <Disable_NVIC+0xc4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <Disable_NVIC+0xc4>)
 80007a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007a8:	6013      	str	r3, [r2, #0]
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <Disable_NVIC+0xc4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <Disable_NVIC+0xc4>)
 80007b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b4:	6013      	str	r3, [r2, #0]
		break;
 80007b6:	e00d      	b.n	80007d4 <Disable_NVIC+0xb8>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <Disable_NVIC+0xc4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <Disable_NVIC+0xc4>)
 80007be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007c2:	6013      	str	r3, [r2, #0]
		break;
 80007c4:	e006      	b.n	80007d4 <Disable_NVIC+0xb8>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <Disable_NVIC+0xc8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <Disable_NVIC+0xc8>)
 80007cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d0:	6013      	str	r3, [r2, #0]
		break;
 80007d2:	bf00      	nop

	}



}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000e180 	.word	0xe000e180
 80007e4:	e000e184 	.word	0xe000e184

080007e8 <Update_EXTI>:




void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	//1- Configuring GPIO pin to be AFIO input ->Floating input
	GPIO_PinConfig_t Exti_GPIO_pincfg;
	Exti_GPIO_pincfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	891b      	ldrh	r3, [r3, #8]
 80007f4:	813b      	strh	r3, [r7, #8]
	Exti_GPIO_pincfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Input;
 80007f6:	2308      	movs	r3, #8
 80007f8:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_INIT(EXTI_Config->EXTI_PIN.GPIO_PORT, &Exti_GPIO_pincfg);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	f107 0208 	add.w	r2, r7, #8
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fa54 	bl	8000cb2 <MCAL_GPIO_INIT>
	//============================================================


	//2- Update AFIO to Route between EXTI Line with PORTS A,B,C,D
	uint8_t AFIO_EXTI_CR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber/4;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	b29b      	uxth	r3, r3
 8000812:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTI_bit_position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4)*4;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f003 0303 	and.w	r3, r3, #3
 800081e:	b2db      	uxtb	r3, r3
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	73bb      	strb	r3, [r7, #14]

	//Clearing EXTICR 4-bits to avoid any abnormal behaviors
	AFIO->EXTICR [AFIO_EXTI_CR_index] &= ~(0xF<<AFIO_EXTI_bit_position);
 8000824:	4a5c      	ldr	r2, [pc, #368]	; (8000998 <Update_EXTI+0x1b0>)
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3302      	adds	r3, #2
 800082a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	210f      	movs	r1, #15
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	43db      	mvns	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	4957      	ldr	r1, [pc, #348]	; (8000998 <Update_EXTI+0x1b0>)
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	4002      	ands	r2, r0
 8000840:	3302      	adds	r3, #2
 8000842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Set EXTICR 4-bits
	AFIO->EXTICR [AFIO_EXTI_CR_index] |=  ((AFIO_GPIO_EXTI_PORT_Routing(EXTI_Config->EXTI_PIN.GPIO_PORT) & 0xF) << AFIO_EXTI_bit_position);
 8000846:	4a54      	ldr	r2, [pc, #336]	; (8000998 <Update_EXTI+0x1b0>)
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	3302      	adds	r3, #2
 800084c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	4951      	ldr	r1, [pc, #324]	; (800099c <Update_EXTI+0x1b4>)
 8000856:	428b      	cmp	r3, r1
 8000858:	d016      	beq.n	8000888 <Update_EXTI+0xa0>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	4950      	ldr	r1, [pc, #320]	; (80009a0 <Update_EXTI+0x1b8>)
 8000860:	428b      	cmp	r3, r1
 8000862:	d00f      	beq.n	8000884 <Update_EXTI+0x9c>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	494e      	ldr	r1, [pc, #312]	; (80009a4 <Update_EXTI+0x1bc>)
 800086a:	428b      	cmp	r3, r1
 800086c:	d008      	beq.n	8000880 <Update_EXTI+0x98>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	494d      	ldr	r1, [pc, #308]	; (80009a8 <Update_EXTI+0x1c0>)
 8000874:	428b      	cmp	r3, r1
 8000876:	d101      	bne.n	800087c <Update_EXTI+0x94>
 8000878:	2303      	movs	r3, #3
 800087a:	e006      	b.n	800088a <Update_EXTI+0xa2>
 800087c:	2300      	movs	r3, #0
 800087e:	e004      	b.n	800088a <Update_EXTI+0xa2>
 8000880:	2302      	movs	r3, #2
 8000882:	e002      	b.n	800088a <Update_EXTI+0xa2>
 8000884:	2301      	movs	r3, #1
 8000886:	e000      	b.n	800088a <Update_EXTI+0xa2>
 8000888:	2300      	movs	r3, #0
 800088a:	7bb9      	ldrb	r1, [r7, #14]
 800088c:	408b      	lsls	r3, r1
 800088e:	4618      	mov	r0, r3
 8000890:	4941      	ldr	r1, [pc, #260]	; (8000998 <Update_EXTI+0x1b0>)
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4302      	orrs	r2, r0
 8000896:	3302      	adds	r3, #2
 8000898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	//3-Update Rising/Falling Edge Register

	EXTI->RTSR &= ~(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800089c:	4b43      	ldr	r3, [pc, #268]	; (80009ac <Update_EXTI+0x1c4>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	8812      	ldrh	r2, [r2, #0]
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	4611      	mov	r1, r2
 80008a8:	4a40      	ldr	r2, [pc, #256]	; (80009ac <Update_EXTI+0x1c4>)
 80008aa:	400b      	ands	r3, r1
 80008ac:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008ae:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <Update_EXTI+0x1c4>)
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	8812      	ldrh	r2, [r2, #0]
 80008b6:	43d2      	mvns	r2, r2
 80008b8:	4611      	mov	r1, r2
 80008ba:	4a3c      	ldr	r2, [pc, #240]	; (80009ac <Update_EXTI+0x1c4>)
 80008bc:	400b      	ands	r3, r1
 80008be:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_type == EXTI_Trigger_Rising)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7b1b      	ldrb	r3, [r3, #12]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d10b      	bne.n	80008e0 <Update_EXTI+0xf8>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008c8:	4b38      	ldr	r3, [pc, #224]	; (80009ac <Update_EXTI+0x1c4>)
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	8812      	ldrh	r2, [r2, #0]
 80008d0:	4611      	mov	r1, r2
 80008d2:	2201      	movs	r2, #1
 80008d4:	408a      	lsls	r2, r1
 80008d6:	4611      	mov	r1, r2
 80008d8:	4a34      	ldr	r2, [pc, #208]	; (80009ac <Update_EXTI+0x1c4>)
 80008da:	430b      	orrs	r3, r1
 80008dc:	6093      	str	r3, [r2, #8]
 80008de:	e029      	b.n	8000934 <Update_EXTI+0x14c>

	}else if(EXTI_Config->Trigger_type == EXTI_Trigger_Falling)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7b1b      	ldrb	r3, [r3, #12]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d10b      	bne.n	8000900 <Update_EXTI+0x118>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <Update_EXTI+0x1c4>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	8812      	ldrh	r2, [r2, #0]
 80008f0:	4611      	mov	r1, r2
 80008f2:	2201      	movs	r2, #1
 80008f4:	408a      	lsls	r2, r1
 80008f6:	4611      	mov	r1, r2
 80008f8:	4a2c      	ldr	r2, [pc, #176]	; (80009ac <Update_EXTI+0x1c4>)
 80008fa:	430b      	orrs	r3, r1
 80008fc:	60d3      	str	r3, [r2, #12]
 80008fe:	e019      	b.n	8000934 <Update_EXTI+0x14c>

	}else if(EXTI_Config->Trigger_type == EXTI_Trigger_Rising_and_Falling)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7b1b      	ldrb	r3, [r3, #12]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d115      	bne.n	8000934 <Update_EXTI+0x14c>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <Update_EXTI+0x1c4>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	8812      	ldrh	r2, [r2, #0]
 8000910:	4611      	mov	r1, r2
 8000912:	2201      	movs	r2, #1
 8000914:	408a      	lsls	r2, r1
 8000916:	4611      	mov	r1, r2
 8000918:	4a24      	ldr	r2, [pc, #144]	; (80009ac <Update_EXTI+0x1c4>)
 800091a:	430b      	orrs	r3, r1
 800091c:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <Update_EXTI+0x1c4>)
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	8812      	ldrh	r2, [r2, #0]
 8000926:	4611      	mov	r1, r2
 8000928:	2201      	movs	r2, #1
 800092a:	408a      	lsls	r2, r1
 800092c:	4611      	mov	r1, r2
 800092e:	4a1f      	ldr	r2, [pc, #124]	; (80009ac <Update_EXTI+0x1c4>)
 8000930:	430b      	orrs	r3, r1
 8000932:	60d3      	str	r3, [r2, #12]

	}


	//4- Update IRQ Handling Callback
	GPTF_IRQ_Callback[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->PTF_IRQ_Callback;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	691b      	ldr	r3, [r3, #16]
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <Update_EXTI+0x1c8>)
 8000940:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


	//5- Enable/Disable IRQ & NVIC

	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7b5b      	ldrb	r3, [r3, #13]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d110      	bne.n	800096e <Update_EXTI+0x186>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <Update_EXTI+0x1c4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	8812      	ldrh	r2, [r2, #0]
 8000954:	4611      	mov	r1, r2
 8000956:	2201      	movs	r2, #1
 8000958:	408a      	lsls	r2, r1
 800095a:	4611      	mov	r1, r2
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <Update_EXTI+0x1c4>)
 800095e:	430b      	orrs	r3, r1
 8000960:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fe72 	bl	8000650 <Enable_NVIC>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}


}
 800096c:	e010      	b.n	8000990 <Update_EXTI+0x1a8>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <Update_EXTI+0x1c4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	8812      	ldrh	r2, [r2, #0]
 8000976:	4611      	mov	r1, r2
 8000978:	2201      	movs	r2, #1
 800097a:	408a      	lsls	r2, r1
 800097c:	43d2      	mvns	r2, r2
 800097e:	4611      	mov	r1, r2
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <Update_EXTI+0x1c4>)
 8000982:	400b      	ands	r3, r1
 8000984:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fec6 	bl	800071c <Disable_NVIC>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40010000 	.word	0x40010000
 800099c:	40010800 	.word	0x40010800
 80009a0:	40010c00 	.word	0x40010c00
 80009a4:	40011000 	.word	0x40011000
 80009a8:	40011400 	.word	0x40011400
 80009ac:	40010400 	.word	0x40010400
 80009b0:	20000020 	.word	0x20000020

080009b4 <MCAL_EXTI_GPIO_Init>:
 * */



void MCAL_EXTI_GPIO_Init (EXTI_PinConfig_t* EXTI_Config)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]


	Update_EXTI(EXTI_Config);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff13 	bl	80007e8 <Update_EXTI>

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <EXTI0_IRQHandler>:
 * =============================================
 *
 */

void EXTI0_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<0);
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <EXTI0_IRQHandler+0x1c>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <EXTI0_IRQHandler+0x1c>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[0]();
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <EXTI0_IRQHandler+0x20>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4798      	blx	r3
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40010400 	.word	0x40010400
 80009ec:	20000020 	.word	0x20000020

080009f0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<1);
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <EXTI1_IRQHandler+0x1c>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <EXTI1_IRQHandler+0x1c>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[1]();
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <EXTI1_IRQHandler+0x20>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	4798      	blx	r3

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40010400 	.word	0x40010400
 8000a10:	20000020 	.word	0x20000020

08000a14 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<2);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <EXTI2_IRQHandler+0x1c>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <EXTI2_IRQHandler+0x1c>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[2]();
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <EXTI2_IRQHandler+0x20>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	4798      	blx	r3

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40010400 	.word	0x40010400
 8000a34:	20000020 	.word	0x20000020

08000a38 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<3);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <EXTI3_IRQHandler+0x1c>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <EXTI3_IRQHandler+0x1c>)
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[3]();
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <EXTI3_IRQHandler+0x20>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	4798      	blx	r3

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010400 	.word	0x40010400
 8000a58:	20000020 	.word	0x20000020

08000a5c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<4);
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <EXTI4_IRQHandler+0x1c>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <EXTI4_IRQHandler+0x1c>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[4]();
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <EXTI4_IRQHandler+0x20>)
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	4798      	blx	r3


}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40010400 	.word	0x40010400
 8000a7c:	20000020 	.word	0x20000020

08000a80 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<7)){EXTI->PR | (1<<7);    GPTF_IRQ_Callback[7]();}
	if(EXTI->PR & (1<<8)){EXTI->PR | (1<<8);    GPTF_IRQ_Callback[8]();}
	if(EXTI->PR & (1<<9)){EXTI->PR | (1<<9);    GPTF_IRQ_Callback[9]();}*/


	if(EXTI->PR & 1<< 5)
 8000a84:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	f003 0320 	and.w	r3, r3, #32
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d008      	beq.n	8000aa2 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<5;
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000a96:	f043 0320 	orr.w	r3, r3, #32
 8000a9a:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[5]();
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <EXTI9_5_IRQHandler+0xa4>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	4798      	blx	r3

	}


	if(EXTI->PR & 1<< 6)
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d008      	beq.n	8000ac0 <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<6;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab8:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[6]();
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <EXTI9_5_IRQHandler+0xa4>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 7)
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d008      	beq.n	8000ade <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<7;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad6:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[7]();
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <EXTI9_5_IRQHandler+0xa4>)
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 8)
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d008      	beq.n	8000afc <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<8;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af4:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[8]();
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <EXTI9_5_IRQHandler+0xa4>)
 8000af8:	6a1b      	ldr	r3, [r3, #32]
 8000afa:	4798      	blx	r3

	}


	if(EXTI->PR & 1<< 9)
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d008      	beq.n	8000b1a <EXTI9_5_IRQHandler+0x9a>
		{
			EXTI->PR |= 1<<9;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <EXTI9_5_IRQHandler+0xa0>)
 8000b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b12:	6153      	str	r3, [r2, #20]
			GPTF_IRQ_Callback[9]();
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <EXTI9_5_IRQHandler+0xa4>)
 8000b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b18:	4798      	blx	r3
		}




}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010400 	.word	0x40010400
 8000b24:	20000020 	.word	0x20000020

08000b28 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

*/



	if(EXTI->PR & 1<< 10)
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d008      	beq.n	8000b4a <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<10;
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b42:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[10]();
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b48:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 11)
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d008      	beq.n	8000b68 <EXTI15_10_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<11;
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b60:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[11]();
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b66:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 12)
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d008      	beq.n	8000b86 <EXTI15_10_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<12;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4a1a      	ldr	r2, [pc, #104]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b7e:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[12]();
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 13)
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d008      	beq.n	8000ba4 <EXTI15_10_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<13;
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000b98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b9c:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[13]();
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba2:	4798      	blx	r3

	}


	if(EXTI->PR & 1<< 14)
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d008      	beq.n	8000bc2 <EXTI15_10_IRQHandler+0x9a>
	{
		EXTI->PR |= 1<<14;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bba:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[14]();
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc0:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 15)
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d008      	beq.n	8000be0 <EXTI15_10_IRQHandler+0xb8>
	{
		EXTI->PR |= 1<<15;
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <EXTI15_10_IRQHandler+0xbc>)
 8000bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd8:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[15]();
 8000bda:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <EXTI15_10_IRQHandler+0xc0>)
 8000bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bde:	4798      	blx	r3

	}


}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40010400 	.word	0x40010400
 8000be8:	20000020 	.word	0x20000020

08000bec <Get_CRLH_Position>:



#include "GPIO/stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t	PinNumber){
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]


	switch(PinNumber){
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	2b80      	cmp	r3, #128	; 0x80
 8000bfa:	d042      	beq.n	8000c82 <Get_CRLH_Position+0x96>
 8000bfc:	2b80      	cmp	r3, #128	; 0x80
 8000bfe:	dc11      	bgt.n	8000c24 <Get_CRLH_Position+0x38>
 8000c00:	2b08      	cmp	r3, #8
 8000c02:	d036      	beq.n	8000c72 <Get_CRLH_Position+0x86>
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	dc06      	bgt.n	8000c16 <Get_CRLH_Position+0x2a>
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d02e      	beq.n	8000c6a <Get_CRLH_Position+0x7e>
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d02e      	beq.n	8000c6e <Get_CRLH_Position+0x82>
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d028      	beq.n	8000c66 <Get_CRLH_Position+0x7a>
 8000c14:	e047      	b.n	8000ca6 <Get_CRLH_Position+0xba>
 8000c16:	2b20      	cmp	r3, #32
 8000c18:	d02f      	beq.n	8000c7a <Get_CRLH_Position+0x8e>
 8000c1a:	2b40      	cmp	r3, #64	; 0x40
 8000c1c:	d02f      	beq.n	8000c7e <Get_CRLH_Position+0x92>
 8000c1e:	2b10      	cmp	r3, #16
 8000c20:	d029      	beq.n	8000c76 <Get_CRLH_Position+0x8a>
 8000c22:	e040      	b.n	8000ca6 <Get_CRLH_Position+0xba>
 8000c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c28:	d033      	beq.n	8000c92 <Get_CRLH_Position+0xa6>
 8000c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c2e:	dc09      	bgt.n	8000c44 <Get_CRLH_Position+0x58>
 8000c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c34:	d029      	beq.n	8000c8a <Get_CRLH_Position+0x9e>
 8000c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c3a:	d028      	beq.n	8000c8e <Get_CRLH_Position+0xa2>
 8000c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c40:	d021      	beq.n	8000c86 <Get_CRLH_Position+0x9a>
 8000c42:	e030      	b.n	8000ca6 <Get_CRLH_Position+0xba>
 8000c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c48:	d027      	beq.n	8000c9a <Get_CRLH_Position+0xae>
 8000c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c4e:	dc03      	bgt.n	8000c58 <Get_CRLH_Position+0x6c>
 8000c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c54:	d01f      	beq.n	8000c96 <Get_CRLH_Position+0xaa>
 8000c56:	e026      	b.n	8000ca6 <Get_CRLH_Position+0xba>
 8000c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c5c:	d01f      	beq.n	8000c9e <Get_CRLH_Position+0xb2>
 8000c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c62:	d01e      	beq.n	8000ca2 <Get_CRLH_Position+0xb6>
 8000c64:	e01f      	b.n	8000ca6 <Get_CRLH_Position+0xba>


	case GPIO_PINS_0:
		return 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e01e      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_1:
		return 4;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	e01c      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_2:
		return 8;
 8000c6e:	2308      	movs	r3, #8
 8000c70:	e01a      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_3:
		return 12;
 8000c72:	230c      	movs	r3, #12
 8000c74:	e018      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_4:
		return 16;
 8000c76:	2310      	movs	r3, #16
 8000c78:	e016      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_5:
		return 20;
 8000c7a:	2314      	movs	r3, #20
 8000c7c:	e014      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_6:
		return 24;
 8000c7e:	2318      	movs	r3, #24
 8000c80:	e012      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_7:
		return 28;
 8000c82:	231c      	movs	r3, #28
 8000c84:	e010      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_8:
		return 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e00e      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_9:
		return 4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	e00c      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_10:
		return 8;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	e00a      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_11:
		return 12;
 8000c92:	230c      	movs	r3, #12
 8000c94:	e008      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_12:
		return 16;
 8000c96:	2310      	movs	r3, #16
 8000c98:	e006      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_13:
		return 20;
 8000c9a:	2314      	movs	r3, #20
 8000c9c:	e004      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_14:
		return 24;
 8000c9e:	2318      	movs	r3, #24
 8000ca0:	e002      	b.n	8000ca8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_15:
		return 28;
 8000ca2:	231c      	movs	r3, #28
 8000ca4:	e000      	b.n	8000ca8 <Get_CRLH_Position+0xbc>


	}


	return 0;
 8000ca6:	2300      	movs	r3, #0




}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <MCAL_GPIO_INIT>:





void MCAL_GPIO_INIT (GPIO_typedef* GPIOx, GPIO_PinConfig_t* PinConfig){
 8000cb2:	b590      	push	{r4, r7, lr}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) : Configure pins from 0>>>7
	//Port configuration register low (GPIOx_CRH) : Configure pins from 8>>>15
	volatile	uint32_t* Config_Register = NULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_config = 0 ;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73fb      	strb	r3, [r7, #15]
	// 0->7 CRL ... 8->15 CRH
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PINS_8)?	&GPIOx->CRL : &GPIOx->CRH;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	2bff      	cmp	r3, #255	; 0xff
 8000cca:	d801      	bhi.n	8000cd0 <MCAL_GPIO_INIT+0x1e>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	e001      	b.n	8000cd4 <MCAL_GPIO_INIT+0x22>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	60bb      	str	r3, [r7, #8]
	//clear clear CNF8[1:0] MODE8[1:0]
	(*Config_Register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff86 	bl	8000bec <Get_CRLH_Position>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	4093      	lsls	r3, r2
 8000ce8:	43da      	mvns	r2, r3
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	601a      	str	r2, [r3, #0]

	//if pin configured as output
	if((PinConfig->GPIO_Pin_Config == GPIO_CONFIG_Output_PP)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Output_OD)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Alternate_Output_OD)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Alternate_Output_PP))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	789b      	ldrb	r3, [r3, #2]
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d00b      	beq.n	8000d14 <MCAL_GPIO_INIT+0x62>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	789b      	ldrb	r3, [r3, #2]
 8000d00:	2b05      	cmp	r3, #5
 8000d02:	d007      	beq.n	8000d14 <MCAL_GPIO_INIT+0x62>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	789b      	ldrb	r3, [r3, #2]
 8000d08:	2b07      	cmp	r3, #7
 8000d0a:	d003      	beq.n	8000d14 <MCAL_GPIO_INIT+0x62>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	2b06      	cmp	r3, #6
 8000d12:	d11c      	bne.n	8000d4e <MCAL_GPIO_INIT+0x9c>
	{
		//(Mode - 4) = true configuration position in data sheet --> see @ref GPIO_CONFIG_define and datasheet difference
		Pin_config = ( ( ( (PinConfig->GPIO_Pin_Config - 4 ) << 2 ) | (PinConfig->GPIO_Mode_config)) & 0x0F );
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	789b      	ldrb	r3, [r3, #2]
 8000d18:	3b04      	subs	r3, #4
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	78db      	ldrb	r3, [r3, #3]
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	73fb      	strb	r3, [r7, #15]
		(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000d30:	7bfc      	ldrb	r4, [r7, #15]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff58 	bl	8000bec <Get_CRLH_Position>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	fa04 f203 	lsl.w	r2, r4, r3
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e076      	b.n	8000e3c <MCAL_GPIO_INIT+0x18a>

	//if pin configured as input
	else
	{

		if((PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Floating_Input) || (PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Analog))
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d003      	beq.n	8000d5e <MCAL_GPIO_INIT+0xac>
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	789b      	ldrb	r3, [r3, #2]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d115      	bne.n	8000d8a <MCAL_GPIO_INIT+0xd8>
		{
			Pin_config = ((((PinConfig -> GPIO_Pin_Config) << 2) | (0)) & 0x0F );
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	789b      	ldrb	r3, [r3, #2]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000d6c:	7bfc      	ldrb	r4, [r7, #15]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff3a 	bl	8000bec <Get_CRLH_Position>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	431a      	orrs	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	e058      	b.n	8000e3c <MCAL_GPIO_INIT+0x18a>

		}
		else if((PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Input_PU)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Input_PD ))
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	789b      	ldrb	r3, [r3, #2]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d003      	beq.n	8000d9a <MCAL_GPIO_INIT+0xe8>
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	789b      	ldrb	r3, [r3, #2]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d135      	bne.n	8000e06 <MCAL_GPIO_INIT+0x154>
		{
			switch(PinConfig->GPIO_Pin_Config)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	789b      	ldrb	r3, [r3, #2]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d002      	beq.n	8000da8 <MCAL_GPIO_INIT+0xf6>
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d00f      	beq.n	8000dc6 <MCAL_GPIO_INIT+0x114>
 8000da6:	e01f      	b.n	8000de8 <MCAL_GPIO_INIT+0x136>
			{
			case  GPIO_CONFIG_Input_PU :
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	8812      	ldrh	r2, [r2, #0]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60da      	str	r2, [r3, #12]
				Pin_config = (((PinConfig->GPIO_Pin_Config << 2 )|(0))&0x0F);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	789b      	ldrb	r3, [r3, #2]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	73fb      	strb	r3, [r7, #15]
				break;
 8000dc4:	e010      	b.n	8000de8 <MCAL_GPIO_INIT+0x136>
			case GPIO_CONFIG_Input_PD :
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	8812      	ldrh	r2, [r2, #0]
 8000dce:	43d2      	mvns	r2, r2
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60da      	str	r2, [r3, #12]
				Pin_config = ((((PinConfig->GPIO_Pin_Config-1) << 2 )|(0))&0x0F);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	789b      	ldrb	r3, [r3, #2]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	73fb      	strb	r3, [r7, #15]
				break;
 8000de6:	bf00      	nop


			}

			( *Config_Register ) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000de8:	7bfc      	ldrb	r4, [r7, #15]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fefc 	bl	8000bec <Get_CRLH_Position>
 8000df4:	4603      	mov	r3, r0
 8000df6:	fa04 f203 	lsl.w	r2, r4, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e01a      	b.n	8000e3c <MCAL_GPIO_INIT+0x18a>

		}
		else if(PinConfig->GPIO_Pin_Config == GPIO_CONFIG_Alternate_Input)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	789b      	ldrb	r3, [r3, #2]
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	d116      	bne.n	8000e3c <MCAL_GPIO_INIT+0x18a>
		{ 	//pin is alternative input (same as input floating)
			Pin_config = ( (((PinConfig->GPIO_Pin_Config-7) << 2) | (0)) & 0x0F	);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	3b07      	subs	r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000e1e:	7bfc      	ldrb	r4, [r7, #15]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fee1 	bl	8000bec <Get_CRLH_Position>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	fa04 f203 	lsl.w	r2, r4, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	431a      	orrs	r2, r3
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	601a      	str	r2, [r3, #0]
	}

	 */


}
 8000e3a:	e7ff      	b.n	8000e3c <MCAL_GPIO_INIT+0x18a>
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}

08000e44 <MCAL_GPIO_WritePin>:




void MCAL_GPIO_WritePin (GPIO_typedef* GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	707b      	strb	r3, [r7, #1]
	if(Value != (GPIO_PIN_RESET))
 8000e54:	787b      	ldrb	r3, [r7, #1]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <MCAL_GPIO_WritePin+0x1e>

		/*	Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Set the corresponding ODRx bit*/
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	611a      	str	r2, [r3, #16]

	}



}
 8000e60:	e002      	b.n	8000e68 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	615a      	str	r2, [r3, #20]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <mywait>:
#include "GPIO/stm32_F103C6_gpio_driver.h"

 unsigned char EXTI_flag ;
 EXTI_PinConfig_t PINCONFIG;
void mywait(unsigned int time)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b085      	sub	sp, #20
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	int i, j;

	for(i = 0 ; i < 255 ; i++){
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e00c      	b.n	8000e9a <mywait+0x28>

		for(j = 0 ; j < time ; j ++);
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	e002      	b.n	8000e8c <mywait+0x1a>
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f8      	bhi.n	8000e86 <mywait+0x14>
	for(i = 0 ; i < 255 ; i++){
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3301      	adds	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2bfe      	cmp	r3, #254	; 0xfe
 8000e9e:	ddef      	ble.n	8000e80 <mywait+0xe>

	}



}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
	...

08000eac <EXTII9_callback>:

void EXTII9_callback(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0


	// EXTI_flag = 1;
	Write_String("IRQ EXTI9 happened _|-");
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <EXTII9_callback+0x1c>)
 8000eb2:	f7ff fb43 	bl	800053c <Write_String>
	mywait(400);
 8000eb6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000eba:	f7ff ffda 	bl	8000e72 <mywait>
    LCD_clear_screen();
 8000ebe:	f7ff fa4f 	bl	8000360 <LCD_clear_screen>


}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	08001014 	.word	0x08001014

08000ecc <RCC_clock_init>:

void RCC_clock_init(void){
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <RCC_clock_init+0x30>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a09      	ldr	r2, [pc, #36]	; (8000efc <RCC_clock_init+0x30>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <RCC_clock_init+0x30>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <RCC_clock_init+0x30>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <RCC_clock_init+0x30>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <RCC_clock_init+0x30>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6193      	str	r3, [r2, #24]


}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40021000 	.word	0x40021000

08000f00 <main>:




int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

//RCC init
RCC_clock_init();
 8000f04:	f7ff ffe2 	bl	8000ecc <RCC_clock_init>

//ECU Init
LCD_Init();
 8000f08:	f7ff fa10 	bl	800032c <LCD_Init>
mywait(200);
 8000f0c:	20c8      	movs	r0, #200	; 0xc8
 8000f0e:	f7ff ffb0 	bl	8000e72 <mywait>


//set an interrupt

PINCONFIG.EXTI_PIN =  EXTI9PB9;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <main+0x4c>)
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <main+0x50>)
 8000f16:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
PINCONFIG.Trigger_type = EXTI_Trigger_Rising;
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <main+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	731a      	strb	r2, [r3, #12]
PINCONFIG.PTF_IRQ_Callback = EXTII9_callback;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <main+0x4c>)
 8000f24:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <main+0x54>)
 8000f26:	611a      	str	r2, [r3, #16]
PINCONFIG.IRQ_EN = EXTI_IRQ_Enable;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <main+0x4c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	735a      	strb	r2, [r3, #13]
MCAL_EXTI_GPIO_Init(&PINCONFIG);
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <main+0x4c>)
 8000f30:	f7ff fd40 	bl	80009b4 <MCAL_EXTI_GPIO_Init>

Write_String("hello");
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <main+0x58>)
 8000f36:	f7ff fb01 	bl	800053c <Write_String>
mywait(200);
 8000f3a:	20c8      	movs	r0, #200	; 0xc8
 8000f3c:	f7ff ff99 	bl	8000e72 <mywait>
LCD_clear_screen();
 8000f40:	f7ff fa0e 	bl	8000360 <LCD_clear_screen>

//Code
EXTI_flag = 1;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <main+0x5c>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
while(1){
 8000f4a:	e7fe      	b.n	8000f4a <main+0x4a>
 8000f4c:	20000060 	.word	0x20000060
 8000f50:	08001034 	.word	0x08001034
 8000f54:	08000ead 	.word	0x08000ead
 8000f58:	0800102c 	.word	0x0800102c
 8000f5c:	20000074 	.word	0x20000074

08000f60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f62:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <LoopForever+0xe>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <LoopForever+0x16>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f8e:	f000 f811 	bl	8000fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f92:	f7ff ffb5 	bl	8000f00 <main>

08000f96 <LoopForever>:

LoopForever:
    b LoopForever
 8000f96:	e7fe      	b.n	8000f96 <LoopForever>
  ldr   r0, =_estack
 8000f98:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000fa4:	08001048 	.word	0x08001048
  ldr r2, =_sbss
 8000fa8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fac:	20000078 	.word	0x20000078

08000fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_2_IRQHandler>
	...

08000fb4 <__libc_init_array>:
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	4e0c      	ldr	r6, [pc, #48]	; (8000fec <__libc_init_array+0x38>)
 8000fba:	4c0d      	ldr	r4, [pc, #52]	; (8000ff0 <__libc_init_array+0x3c>)
 8000fbc:	1ba4      	subs	r4, r4, r6
 8000fbe:	10a4      	asrs	r4, r4, #2
 8000fc0:	42a5      	cmp	r5, r4
 8000fc2:	d109      	bne.n	8000fd8 <__libc_init_array+0x24>
 8000fc4:	f000 f81a 	bl	8000ffc <_init>
 8000fc8:	2500      	movs	r5, #0
 8000fca:	4e0a      	ldr	r6, [pc, #40]	; (8000ff4 <__libc_init_array+0x40>)
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	; (8000ff8 <__libc_init_array+0x44>)
 8000fce:	1ba4      	subs	r4, r4, r6
 8000fd0:	10a4      	asrs	r4, r4, #2
 8000fd2:	42a5      	cmp	r5, r4
 8000fd4:	d105      	bne.n	8000fe2 <__libc_init_array+0x2e>
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fdc:	4798      	blx	r3
 8000fde:	3501      	adds	r5, #1
 8000fe0:	e7ee      	b.n	8000fc0 <__libc_init_array+0xc>
 8000fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fe6:	4798      	blx	r3
 8000fe8:	3501      	adds	r5, #1
 8000fea:	e7f2      	b.n	8000fd2 <__libc_init_array+0x1e>
 8000fec:	08001040 	.word	0x08001040
 8000ff0:	08001040 	.word	0x08001040
 8000ff4:	08001040 	.word	0x08001040
 8000ff8:	08001044 	.word	0x08001044

08000ffc <_init>:
 8000ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffe:	bf00      	nop
 8001000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001002:	bc08      	pop	{r3}
 8001004:	469e      	mov	lr, r3
 8001006:	4770      	bx	lr

08001008 <_fini>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	bf00      	nop
 800100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100e:	bc08      	pop	{r3}
 8001010:	469e      	mov	lr, r3
 8001012:	4770      	bx	lr
