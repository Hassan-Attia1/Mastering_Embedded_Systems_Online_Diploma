
LCD_interfacing_with_ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000002be  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a8b  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000709  00000000  00000000  00000ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000692  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00001c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043a  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000339  00000000  00000000  000021e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000251b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  7a:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_init>:


void KEYPAD_init(void){
	
	
	KEYPAD_DataDir_PORTD &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3));
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	KEYPAD_DataDir_PORTD |= ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
	
	KEYPAD_PORTD |= 0xFF;
  8e:	82 b3       	in	r24, 0x12	; 18
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	82 bb       	out	0x12, r24	; 18
  94:	08 95       	ret

00000096 <KEYPAD_GETCHAR>:

char KEYPAD_GETCHAR(){
	int i;
	int j;
	
	for(i=0 ; i<4 ; i++){
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	7b c0       	rjmp	.+246    	; 0x192 <KEYPAD_GETCHAR+0xfc>
		//Turning on all columns 
		KEYPAD_PORTD |= ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	80 6f       	ori	r24, 0xF0	; 240
  a0:	82 bb       	out	0x12, r24	; 18
		//Turning off each column to check which (button/number) pressed
		KEYPAD_PORTD &= ~(1<<KEYPAD_C[i]);
  a2:	22 b3       	in	r18, 0x12	; 18
  a4:	fb 01       	movw	r30, r22
  a6:	ee 0f       	add	r30, r30
  a8:	ff 1f       	adc	r31, r31
  aa:	e0 5a       	subi	r30, 0xA0	; 160
  ac:	ff 4f       	sbci	r31, 0xFF	; 255
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	00 80       	ld	r0, Z
  b4:	02 c0       	rjmp	.+4      	; 0xba <KEYPAD_GETCHAR+0x24>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <KEYPAD_GETCHAR+0x20>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	82 bb       	out	0x12, r24	; 18
		
		//checking which button is pressed by looping on each Row		
		for( j = 0 ; j < 4 ; j++ ){
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	5e c0       	rjmp	.+188    	; 0x186 <KEYPAD_GETCHAR+0xf0>
			
			
			
			if( !(KEYPAD_READ & (1<<KEYPAD_R[j]) )){
  ca:	80 b3       	in	r24, 0x10	; 16
  cc:	fa 01       	movw	r30, r20
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	e8 59       	subi	r30, 0x98	; 152
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	20 81       	ld	r18, Z
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 2e       	mov	r0, r18
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <KEYPAD_GETCHAR+0x4c>
  de:	95 95       	asr	r25
  e0:	87 95       	ror	r24
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <KEYPAD_GETCHAR+0x48>
  e6:	80 fd       	sbrc	r24, 0
  e8:	4c c0       	rjmp	.+152    	; 0x182 <KEYPAD_GETCHAR+0xec>
				
				//For single Press
				while(!(KEYPAD_READ & (1<<KEYPAD_R[j]) )){}
  ea:	80 b3       	in	r24, 0x10	; 16
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <KEYPAD_GETCHAR+0x60>
  f2:	95 95       	asr	r25
  f4:	87 95       	ror	r24
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <KEYPAD_GETCHAR+0x5c>
  fa:	80 ff       	sbrs	r24, 0
  fc:	f6 cf       	rjmp	.-20     	; 0xea <KEYPAD_GETCHAR+0x54>
				
				switch(i){
  fe:	61 30       	cpi	r22, 0x01	; 1
 100:	71 05       	cpc	r23, r1
 102:	c9 f0       	breq	.+50     	; 0x136 <KEYPAD_GETCHAR+0xa0>
 104:	24 f4       	brge	.+8      	; 0x10e <KEYPAD_GETCHAR+0x78>
 106:	61 15       	cp	r22, r1
 108:	71 05       	cpc	r23, r1
 10a:	41 f0       	breq	.+16     	; 0x11c <KEYPAD_GETCHAR+0x86>
 10c:	3a c0       	rjmp	.+116    	; 0x182 <KEYPAD_GETCHAR+0xec>
 10e:	62 30       	cpi	r22, 0x02	; 2
 110:	71 05       	cpc	r23, r1
 112:	f1 f0       	breq	.+60     	; 0x150 <KEYPAD_GETCHAR+0xba>
 114:	63 30       	cpi	r22, 0x03	; 3
 116:	71 05       	cpc	r23, r1
 118:	41 f1       	breq	.+80     	; 0x16a <KEYPAD_GETCHAR+0xd4>
 11a:	33 c0       	rjmp	.+102    	; 0x182 <KEYPAD_GETCHAR+0xec>
					
					case 0 :
					if(j == 0){return '7';}
 11c:	41 15       	cp	r20, r1
 11e:	51 05       	cpc	r21, r1
 120:	f1 f1       	breq	.+124    	; 0x19e <KEYPAD_GETCHAR+0x108>
					else if(j == 1){return '4';}
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	51 05       	cpc	r21, r1
 126:	e9 f1       	breq	.+122    	; 0x1a2 <KEYPAD_GETCHAR+0x10c>
					else if(j == 2){return '1';}
 128:	42 30       	cpi	r20, 0x02	; 2
 12a:	51 05       	cpc	r21, r1
 12c:	e1 f1       	breq	.+120    	; 0x1a6 <KEYPAD_GETCHAR+0x110>
					else if(j == 3){return '!';}
 12e:	43 30       	cpi	r20, 0x03	; 3
 130:	51 05       	cpc	r21, r1
 132:	39 f5       	brne	.+78     	; 0x182 <KEYPAD_GETCHAR+0xec>
 134:	3a c0       	rjmp	.+116    	; 0x1aa <KEYPAD_GETCHAR+0x114>
					
					break;
					
					case 1 :
					if(j == 0){return '8';}
 136:	41 15       	cp	r20, r1
 138:	51 05       	cpc	r21, r1
 13a:	c9 f1       	breq	.+114    	; 0x1ae <KEYPAD_GETCHAR+0x118>
					else if(j == 1){return '5';}
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	51 05       	cpc	r21, r1
 140:	c1 f1       	breq	.+112    	; 0x1b2 <KEYPAD_GETCHAR+0x11c>
					else if(j == 2){return '2';}
 142:	42 30       	cpi	r20, 0x02	; 2
 144:	51 05       	cpc	r21, r1
 146:	b9 f1       	breq	.+110    	; 0x1b6 <KEYPAD_GETCHAR+0x120>
					else if(j == 3){return '0';}
 148:	43 30       	cpi	r20, 0x03	; 3
 14a:	51 05       	cpc	r21, r1
 14c:	d1 f4       	brne	.+52     	; 0x182 <KEYPAD_GETCHAR+0xec>
 14e:	35 c0       	rjmp	.+106    	; 0x1ba <KEYPAD_GETCHAR+0x124>
					break;
					
					case 2 :
					if(j == 0){return '9';}
 150:	41 15       	cp	r20, r1
 152:	51 05       	cpc	r21, r1
 154:	a1 f1       	breq	.+104    	; 0x1be <KEYPAD_GETCHAR+0x128>
					else if(j == 1){return '6';}
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	51 05       	cpc	r21, r1
 15a:	99 f1       	breq	.+102    	; 0x1c2 <KEYPAD_GETCHAR+0x12c>
					else if(j == 2){return '3';}
 15c:	42 30       	cpi	r20, 0x02	; 2
 15e:	51 05       	cpc	r21, r1
 160:	91 f1       	breq	.+100    	; 0x1c6 <KEYPAD_GETCHAR+0x130>
					else if(j == 3){return '=';}
 162:	43 30       	cpi	r20, 0x03	; 3
 164:	51 05       	cpc	r21, r1
 166:	69 f4       	brne	.+26     	; 0x182 <KEYPAD_GETCHAR+0xec>
 168:	30 c0       	rjmp	.+96     	; 0x1ca <KEYPAD_GETCHAR+0x134>
					break;
					
					case 3 :
					if(j == 0){return '/';}
 16a:	41 15       	cp	r20, r1
 16c:	51 05       	cpc	r21, r1
 16e:	79 f1       	breq	.+94     	; 0x1ce <KEYPAD_GETCHAR+0x138>
					else if(j == 1){return '*';}
 170:	41 30       	cpi	r20, 0x01	; 1
 172:	51 05       	cpc	r21, r1
 174:	71 f1       	breq	.+92     	; 0x1d2 <KEYPAD_GETCHAR+0x13c>
					else if(j == 2){return '-';}
 176:	42 30       	cpi	r20, 0x02	; 2
 178:	51 05       	cpc	r21, r1
 17a:	69 f1       	breq	.+90     	; 0x1d6 <KEYPAD_GETCHAR+0x140>
					else if(j == 3){return '+';}
 17c:	43 30       	cpi	r20, 0x03	; 3
 17e:	51 05       	cpc	r21, r1
 180:	61 f1       	breq	.+88     	; 0x1da <KEYPAD_GETCHAR+0x144>
		KEYPAD_PORTD |= ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
		//Turning off each column to check which (button/number) pressed
		KEYPAD_PORTD &= ~(1<<KEYPAD_C[i]);
		
		//checking which button is pressed by looping on each Row		
		for( j = 0 ; j < 4 ; j++ ){
 182:	4f 5f       	subi	r20, 0xFF	; 255
 184:	5f 4f       	sbci	r21, 0xFF	; 255
 186:	44 30       	cpi	r20, 0x04	; 4
 188:	51 05       	cpc	r21, r1
 18a:	0c f4       	brge	.+2      	; 0x18e <KEYPAD_GETCHAR+0xf8>
 18c:	9e cf       	rjmp	.-196    	; 0xca <KEYPAD_GETCHAR+0x34>

char KEYPAD_GETCHAR(){
	int i;
	int j;
	
	for(i=0 ; i<4 ; i++){
 18e:	6f 5f       	subi	r22, 0xFF	; 255
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	64 30       	cpi	r22, 0x04	; 4
 194:	71 05       	cpc	r23, r1
 196:	0c f4       	brge	.+2      	; 0x19a <KEYPAD_GETCHAR+0x104>
 198:	81 cf       	rjmp	.-254    	; 0x9c <KEYPAD_GETCHAR+0x6>
																	}
		
		
		
		//IF user didn't press on any button
		return 'N';
 19a:	8e e4       	ldi	r24, 0x4E	; 78
 19c:	08 95       	ret
				while(!(KEYPAD_READ & (1<<KEYPAD_R[j]) )){}
				
				switch(i){
					
					case 0 :
					if(j == 0){return '7';}
 19e:	87 e3       	ldi	r24, 0x37	; 55
 1a0:	08 95       	ret
					else if(j == 1){return '4';}
 1a2:	84 e3       	ldi	r24, 0x34	; 52
 1a4:	08 95       	ret
					else if(j == 2){return '1';}
 1a6:	81 e3       	ldi	r24, 0x31	; 49
 1a8:	08 95       	ret
					else if(j == 3){return '!';}
 1aa:	81 e2       	ldi	r24, 0x21	; 33
 1ac:	08 95       	ret
					
					break;
					
					case 1 :
					if(j == 0){return '8';}
 1ae:	88 e3       	ldi	r24, 0x38	; 56
 1b0:	08 95       	ret
					else if(j == 1){return '5';}
 1b2:	85 e3       	ldi	r24, 0x35	; 53
 1b4:	08 95       	ret
					else if(j == 2){return '2';}
 1b6:	82 e3       	ldi	r24, 0x32	; 50
 1b8:	08 95       	ret
					else if(j == 3){return '0';}
 1ba:	80 e3       	ldi	r24, 0x30	; 48
 1bc:	08 95       	ret
					break;
					
					case 2 :
					if(j == 0){return '9';}
 1be:	89 e3       	ldi	r24, 0x39	; 57
 1c0:	08 95       	ret
					else if(j == 1){return '6';}
 1c2:	86 e3       	ldi	r24, 0x36	; 54
 1c4:	08 95       	ret
					else if(j == 2){return '3';}
 1c6:	83 e3       	ldi	r24, 0x33	; 51
 1c8:	08 95       	ret
					else if(j == 3){return '=';}
 1ca:	8d e3       	ldi	r24, 0x3D	; 61
 1cc:	08 95       	ret
					break;
					
					case 3 :
					if(j == 0){return '/';}
 1ce:	8f e2       	ldi	r24, 0x2F	; 47
 1d0:	08 95       	ret
					else if(j == 1){return '*';}
 1d2:	8a e2       	ldi	r24, 0x2A	; 42
 1d4:	08 95       	ret
					else if(j == 2){return '-';}
 1d6:	8d e2       	ldi	r24, 0x2D	; 45
 1d8:	08 95       	ret
					else if(j == 3){return '+';}
 1da:	8b e2       	ldi	r24, 0x2B	; 43
		
		//IF user didn't press on any button
		return 'N';
		
		
	}
 1dc:	08 95       	ret

000001de <LCD_KICK>:
	
	//this function made to disable/enable the read / write mode when we write the intended command in order to avoid any other interrupt command 
		
	
	
	LCD_CTRL_PORTB &= ~(1<<Enable_Switch);
 1de:	88 b3       	in	r24, 0x18	; 24
 1e0:	87 7f       	andi	r24, 0xF7	; 247
 1e2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	8f e5       	ldi	r24, 0x5F	; 95
 1e6:	9a ee       	ldi	r25, 0xEA	; 234
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCD_KICK+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <LCD_KICK+0x10>
 1ee:	00 00       	nop
	
	_delay_ms(30);
	
	LCD_CTRL_PORTB |= (1<<Enable_Switch);
 1f0:	88 b3       	in	r24, 0x18	; 24
 1f2:	88 60       	ori	r24, 0x08	; 8
 1f4:	88 bb       	out	0x18, r24	; 24
 1f6:	08 95       	ret

000001f8 <LCD_Busy>:
void LCD_Busy(void)
{	
	
	#ifdef  Eight_Bit_MODE

	LCD_PORTA_dir = 0x00; // port A now is input (READ FROM LCD)
 1f8:	1a ba       	out	0x1a, r1	; 26
	
		 #ifdef FOUR_Bit_MODE
		LCD_PORTA_dir &= ~(0xFF<<DATA_SHIFT); 
		 #endif
	
	LCD_CTRL_PORTB |= (1<<RW_Switch);//Read mode
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL_PORTB &= ~(1<<RS_Switch);//Register set is off
 200:	88 b3       	in	r24, 0x18	; 24
 202:	8d 7f       	andi	r24, 0xFD	; 253
 204:	88 bb       	out	0x18, r24	; 24
	
	LCD_KICK();
 206:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_KICK>
	
	LCD_PORTA_dir = 0xFF; //port A now is output (WRITE FROM LCD)
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL_PORTB &= ~(1<<RW_Switch); //WRITE MODE
 20e:	88 b3       	in	r24, 0x18	; 24
 210:	8b 7f       	andi	r24, 0xFB	; 251
 212:	88 bb       	out	0x18, r24	; 24
 214:	08 95       	ret

00000216 <Write_Command>:
 
 
 
 //***************************COMMAND FUNCTION***********************************

void Write_Command(unsigned char command){
 216:	cf 93       	push	r28
 218:	c8 2f       	mov	r28, r24
	
	
	
	#ifdef Eight_Bit_MODE
	LCD_Busy();
 21a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_Busy>
	LCD_PORTA = command; // look at LCD Command Macros & LCD Instruction Set Macros in the header file
 21e:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL_PORTB &= ~((1<<RS_Switch) | (1<<RW_Switch)); 
 220:	88 b3       	in	r24, 0x18	; 24
 222:	89 7f       	andi	r24, 0xF9	; 249
 224:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 226:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_KICK>
	   
	 
	 #endif
		
	
}
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <LCD_clear_screen>:

//***************************LCD CLEAR FUNCTION***********************************

void LCD_clear_screen(void)
{
	Write_Command(Clear_display);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 0b 01 	call	0x216	; 0x216 <Write_Command>
 234:	08 95       	ret

00000236 <LCD_Init>:
 236:	8f e3       	ldi	r24, 0x3F	; 63
 238:	9c e9       	ldi	r25, 0x9C	; 156
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Init+0x4>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Init+0xa>
 240:	00 00       	nop

 
void LCD_Init(void)
{
		_delay_ms(20);	
		LCD_Busy();
 242:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_Busy>
		LCD_CTRL_dir |= (1<<RS_Switch) | (1<<RW_Switch) | (1<<Enable_Switch);
 246:	87 b3       	in	r24, 0x17	; 23
 248:	8e 60       	ori	r24, 0x0E	; 14
 24a:	87 bb       	out	0x17, r24	; 23
		LCD_CTRL_PORTB &= ~((1<<RS_Switch) | (1<<RW_Switch) | (1<<Enable_Switch));
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	81 7f       	andi	r24, 0xF1	; 241
 250:	88 bb       	out	0x18, r24	; 24
		LCD_PORTA_dir = 0xFF;
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	8a bb       	out	0x1a, r24	; 26
		LCD_clear_screen();
 256:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_clear_screen>
		
	#ifdef Eight_Bit_MODE

	Write_Command(eight_bit_2Line);
 25a:	88 e3       	ldi	r24, 0x38	; 56
 25c:	0e 94 0b 01 	call	0x216	; 0x216 <Write_Command>
	LCD_command_4bit(0x02);
	LCD_command_4bit(four_bit_2line);
 
	#endif
	
	Write_Command(Entry_mode);
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	0e 94 0b 01 	call	0x216	; 0x216 <Write_Command>
	Write_Command(Beginning_first_line);
 266:	80 e8       	ldi	r24, 0x80	; 128
 268:	0e 94 0b 01 	call	0x216	; 0x216 <Write_Command>
	Write_Command(Display_on_Curosr_blinking);
 26c:	8f e0       	ldi	r24, 0x0F	; 15
 26e:	0e 94 0b 01 	call	0x216	; 0x216 <Write_Command>
 272:	08 95       	ret

00000274 <Write_char>:
}

//******************************CHARACTER FUNCTION********************************


void Write_char(unsigned char data){
 274:	cf 93       	push	r28
 276:	c8 2f       	mov	r28, r24
	
		#ifdef Eight_Bit_MODE
		LCD_Busy();
 278:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_Busy>
		LCD_CTRL_PORTB |= (1<<RS_Switch);
 27c:	88 b3       	in	r24, 0x18	; 24
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	88 bb       	out	0x18, r24	; 24
		LCD_PORTA = data; // look at LCD Command Macros & LCD Instruction Set Macros in the header file
 282:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL_PORTB |= (1<<RS_Switch);
 284:	88 b3       	in	r24, 0x18	; 24
 286:	82 60       	ori	r24, 0x02	; 2
 288:	88 bb       	out	0x18, r24	; 24
		LCD_CTRL_PORTB &= ~((1<<RW_Switch));
 28a:	88 b3       	in	r24, 0x18	; 24
 28c:	8b 7f       	andi	r24, 0xFB	; 251
 28e:	88 bb       	out	0x18, r24	; 24
	
		
		LCD_KICK();
 290:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_KICK>
		
	
	
	
	
}
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <main>:
#include "LCD/LCD.h"
#include "LCD/KEYPAD/KEYPAD.h"

int main(void)
{
    LCD_Init();
 298:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_Init>
	KEYPAD_init();
 29c:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_init>
	 
	 char pressed_key ;
	 
	     while (1) 
    {	pressed_key = KEYPAD_GETCHAR();
 2a0:	0e 94 4b 00 	call	0x96	; 0x96 <KEYPAD_GETCHAR>
		switch(pressed_key){
 2a4:	81 32       	cpi	r24, 0x21	; 33
 2a6:	19 f0       	breq	.+6      	; 0x2ae <main+0x16>
 2a8:	8e 34       	cpi	r24, 0x4E	; 78
 2aa:	d1 f3       	breq	.-12     	; 0x2a0 <main+0x8>
 2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <main+0x1c>
			
			
			case '!':
			LCD_clear_screen();
 2ae:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_clear_screen>
			break;
 2b2:	f6 cf       	rjmp	.-20     	; 0x2a0 <main+0x8>
			case 'N':
			break;
			default:
			Write_char(pressed_key);
 2b4:	0e 94 3a 01 	call	0x274	; 0x274 <Write_char>
			break;
 2b8:	f3 cf       	rjmp	.-26     	; 0x2a0 <main+0x8>

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
