
unit6_lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e8  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038a  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  0000130c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f4  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_2>
   c:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  64:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
void GPIO_init(void);



	
	ISR(INT0_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	8f 93       	push	r24
  7c:	9f 93       	push	r25
		
		//LED is on PORTD5
		PORTD ^= 1 << 5;
  7e:	92 b3       	in	r25, 0x12	; 18
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	98 27       	eor	r25, r24
  84:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f e7       	ldi	r18, 0x7F	; 127
  88:	3a e1       	ldi	r19, 0x1A	; 26
  8a:	96 e0       	ldi	r25, 0x06	; 6
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <__vector_1+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <__vector_1+0x2a>
  96:	00 00       	nop
		
		_delay_ms(2000);
		//LED is off
		PORTD ^= 1 << 5;
  98:	92 b3       	in	r25, 0x12	; 18
  9a:	89 27       	eor	r24, r25
  9c:	82 bb       	out	0x12, r24	; 18
		
		//Turning off the interrupt flag
		GIFR |= 1 << 6;
  9e:	8a b7       	in	r24, 0x3a	; 58
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	8a bf       	out	0x3a, r24	; 58
		
	}
  a4:	9f 91       	pop	r25
  a6:	8f 91       	pop	r24
  a8:	3f 91       	pop	r19
  aa:	2f 91       	pop	r18
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <__vector_2>:
	
	ISR(INT1_vect){
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
		
		
		//LED is on PORTD6
		PORTD ^= 1 << 6;
  c8:	92 b3       	in	r25, 0x12	; 18
  ca:	80 e4       	ldi	r24, 0x40	; 64
  cc:	98 27       	eor	r25, r24
  ce:	92 bb       	out	0x12, r25	; 18
  d0:	2f e7       	ldi	r18, 0x7F	; 127
  d2:	3a e1       	ldi	r19, 0x1A	; 26
  d4:	96 e0       	ldi	r25, 0x06	; 6
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__vector_2+0x20>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <__vector_2+0x2a>
  e0:	00 00       	nop
		
		_delay_ms(2000);
		
		//LED is off
		PORTD ^= 1 << 6;
  e2:	92 b3       	in	r25, 0x12	; 18
  e4:	89 27       	eor	r24, r25
  e6:	82 bb       	out	0x12, r24	; 18
		
		//Turning off the interrupt flag
		GIFR |= 1 << 7;
  e8:	8a b7       	in	r24, 0x3a	; 58
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8a bf       	out	0x3a, r24	; 58
	}
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	3f 91       	pop	r19
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_3>:
	
	ISR(INT2_vect){
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
		
		//LED is on PORTD7
		PORTD ^= 1 << 7;
 110:	82 b3       	in	r24, 0x12	; 18
 112:	80 58       	subi	r24, 0x80	; 128
 114:	82 bb       	out	0x12, r24	; 18
 116:	2f e7       	ldi	r18, 0x7F	; 127
 118:	8a e1       	ldi	r24, 0x1A	; 26
 11a:	96 e0       	ldi	r25, 0x06	; 6
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <__vector_3+0x1c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <__vector_3+0x26>
 126:	00 00       	nop
		
		_delay_ms(2000);

		PORTD ^= 1 << 7;
 128:	82 b3       	in	r24, 0x12	; 18
 12a:	80 58       	subi	r24, 0x80	; 128
 12c:	82 bb       	out	0x12, r24	; 18
		//Turning off the interrupt flag
		GIFR |= 1 << 5;
 12e:	8a b7       	in	r24, 0x3a	; 58
 130:	80 62       	ori	r24, 0x20	; 32
 132:	8a bf       	out	0x3a, r24	; 58
	}
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <external_intrrupt_init>:

void external_intrrupt_init(void){


//disabling External interrupts
SREG &= ~(1<<7);
 144:	8f b7       	in	r24, 0x3f	; 63
 146:	8f 77       	andi	r24, 0x7F	; 127
 148:	8f bf       	out	0x3f, r24	; 63


//enabling interrupts 0,1,2
GICR &= ~(1<<7);
 14a:	8b b7       	in	r24, 0x3b	; 59
 14c:	8f 77       	andi	r24, 0x7F	; 127
 14e:	8b bf       	out	0x3b, r24	; 59
GICR |= (1<<7);  //INT1 is enabled
 150:	8b b7       	in	r24, 0x3b	; 59
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8b bf       	out	0x3b, r24	; 59

GICR &= ~(1<<6);
 156:	8b b7       	in	r24, 0x3b	; 59
 158:	8f 7b       	andi	r24, 0xBF	; 191
 15a:	8b bf       	out	0x3b, r24	; 59
GICR |= (1<<6); //INT0 is enabled
 15c:	8b b7       	in	r24, 0x3b	; 59
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	8b bf       	out	0x3b, r24	; 59

GICR &= ~(1<<5);
 162:	8b b7       	in	r24, 0x3b	; 59
 164:	8f 7d       	andi	r24, 0xDF	; 223
 166:	8b bf       	out	0x3b, r24	; 59
GICR |= (1<<5); //INT2 is enabled
 168:	8b b7       	in	r24, 0x3b	; 59
 16a:	80 62       	ori	r24, 0x20	; 32
 16c:	8b bf       	out	0x3b, r24	; 59

 
//setting the sense control for each interrupt
MCUCR &= ~(0b00<<0);
 16e:	85 b7       	in	r24, 0x35	; 53
 170:	85 bf       	out	0x35, r24	; 53
MCUCR |= 0b01 << 0; //INT0 set to rising and falling edges
 172:	85 b7       	in	r24, 0x35	; 53
 174:	81 60       	ori	r24, 0x01	; 1
 176:	85 bf       	out	0x35, r24	; 53

MCUCR &= ~(0b00<<2);
 178:	85 b7       	in	r24, 0x35	; 53
 17a:	85 bf       	out	0x35, r24	; 53
MCUCR |= 0b11 << 2; //INT1 set to rising edge
 17c:	85 b7       	in	r24, 0x35	; 53
 17e:	8c 60       	ori	r24, 0x0C	; 12
 180:	85 bf       	out	0x35, r24	; 53

MCUCSR &= ~(1<<6);
 182:	84 b7       	in	r24, 0x34	; 52
 184:	8f 7b       	andi	r24, 0xBF	; 191
 186:	84 bf       	out	0x34, r24	; 52
MCUCSR |= 0 << 6;	//INT2 set to rising edge
 188:	84 b7       	in	r24, 0x34	; 52
 18a:	84 bf       	out	0x34, r24	; 52


//enabling External interrupts
SREG |= 1<<7;
 18c:	8f b7       	in	r24, 0x3f	; 63
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	8f bf       	out	0x3f, r24	; 63
 192:	08 95       	ret

00000194 <GPIO_init>:
	
//INPUTS


//PORT B2
DDRB &= ~(1<<2);
 194:	87 b3       	in	r24, 0x17	; 23
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	87 bb       	out	0x17, r24	; 23
DDRB |= 0 << 2;
 19a:	87 b3       	in	r24, 0x17	; 23
 19c:	87 bb       	out	0x17, r24	; 23

//PORTS D2 , D3
DDRD &= ~(1<<2);
 19e:	81 b3       	in	r24, 0x11	; 17
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	81 bb       	out	0x11, r24	; 17
DDRD |= 0 << 2;
 1a4:	81 b3       	in	r24, 0x11	; 17
 1a6:	81 bb       	out	0x11, r24	; 17

DDRD &= ~(1<<3);
 1a8:	81 b3       	in	r24, 0x11	; 17
 1aa:	87 7f       	andi	r24, 0xF7	; 247
 1ac:	81 bb       	out	0x11, r24	; 17
DDRD |= 0 << 3;
 1ae:	81 b3       	in	r24, 0x11	; 17
 1b0:	81 bb       	out	0x11, r24	; 17


//OUTPUTS

//PORTS D5, D6, D7
DDRD &= ~(1<<5);
 1b2:	81 b3       	in	r24, 0x11	; 17
 1b4:	8f 7d       	andi	r24, 0xDF	; 223
 1b6:	81 bb       	out	0x11, r24	; 17
DDRD |= 1 << 5;
 1b8:	81 b3       	in	r24, 0x11	; 17
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	81 bb       	out	0x11, r24	; 17

DDRD &= ~(1<<6);
 1be:	81 b3       	in	r24, 0x11	; 17
 1c0:	8f 7b       	andi	r24, 0xBF	; 191
 1c2:	81 bb       	out	0x11, r24	; 17
DDRD |= 1 << 6;
 1c4:	81 b3       	in	r24, 0x11	; 17
 1c6:	80 64       	ori	r24, 0x40	; 64
 1c8:	81 bb       	out	0x11, r24	; 17
PORTD &= ~(1<<6);
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	8f 7b       	andi	r24, 0xBF	; 191
 1ce:	82 bb       	out	0x12, r24	; 18

DDRD &= ~(1<<7);
 1d0:	81 b3       	in	r24, 0x11	; 17
 1d2:	8f 77       	andi	r24, 0x7F	; 127
 1d4:	81 bb       	out	0x11, r24	; 17
DDRD |= 1 << 7;
 1d6:	81 b3       	in	r24, 0x11	; 17
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	81 bb       	out	0x11, r24	; 17
PORTD &= ~(1<<7);
 1dc:	82 b3       	in	r24, 0x12	; 18
 1de:	8f 77       	andi	r24, 0x7F	; 127
 1e0:	82 bb       	out	0x12, r24	; 18
 1e2:	08 95       	ret

000001e4 <main>:
	
	

int main(void)
{	
	GPIO_init();
 1e4:	0e 94 ca 00 	call	0x194	; 0x194 <GPIO_init>
	external_intrrupt_init();
 1e8:	0e 94 a2 00 	call	0x144	; 0x144 <external_intrrupt_init>
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <main+0x8>

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
