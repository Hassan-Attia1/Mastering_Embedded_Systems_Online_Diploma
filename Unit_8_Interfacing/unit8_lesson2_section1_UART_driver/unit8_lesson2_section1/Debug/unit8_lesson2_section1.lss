
unit8_lesson2_section1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000340  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006e  0080006e  000003e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be4  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bf  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000770  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  0000201c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c6  00000000  00000000  00002623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000029e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  8a:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_KICK>:
	
		
	}
 
	
	} 
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
  98:	8f e2       	ldi	r24, 0x2F	; 47
  9a:	95 e7       	ldi	r25, 0x75	; 117
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_KICK+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_KICK+0x10>
  a2:	00 00       	nop
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_Busy>:
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	88 bb       	out	0x18, r24	; 24
  be:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8a bb       	out	0x1a, r24	; 26
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	08 95       	ret

000000ce <Write_Command>:
  ce:	cf 93       	push	r28
  d0:	c8 2f       	mov	r28, r24
  d2:	0e 94 56 00 	call	0xac	; 0xac <LCD_Busy>
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	9c 2f       	mov	r25, r28
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	89 2b       	or	r24, r25
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	89 7f       	andi	r24, 0xF9	; 249
  e6:	88 bb       	out	0x18, r24	; 24
  e8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
  ec:	2b b3       	in	r18, 0x1b	; 27
  ee:	30 e1       	ldi	r19, 0x10	; 16
  f0:	c3 9f       	mul	r28, r19
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	92 2f       	mov	r25, r18
  f8:	9f 70       	andi	r25, 0x0F	; 15
  fa:	89 2b       	or	r24, r25
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	89 7f       	andi	r24, 0xF9	; 249
 102:	88 bb       	out	0x18, r24	; 24
 104:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <LCD_clear_screen>:
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 67 00 	call	0xce	; 0xce <Write_Command>
 112:	08 95       	ret

00000114 <LCD_command_4bit>:
	
	
	
}

void LCD_command_4bit(unsigned char command){
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
	
	
	LCD_Busy();
 118:	0e 94 56 00 	call	0xac	; 0xac <LCD_Busy>
	LCD_PORTA &= 0x0F;
 11c:	8b b3       	in	r24, 0x1b	; 27
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	8b bb       	out	0x1b, r24	; 27
	LCD_PORTA |= (0xF0 & command);
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	9c 2f       	mov	r25, r28
 126:	90 7f       	andi	r25, 0xF0	; 240
 128:	89 2b       	or	r24, r25
 12a:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORTB &= ~((1<<RW_Switch)|(1<<RW_Switch));
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 132:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	LCD_PORTA &= 0x0F;
 136:	8b b3       	in	r24, 0x1b	; 27
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	8b bb       	out	0x1b, r24	; 27
	LCD_PORTA |= ((command << DATA_SHIFT) & 0xF0);
 13c:	2b b3       	in	r18, 0x1b	; 27
 13e:	30 e1       	ldi	r19, 0x10	; 16
 140:	c3 9f       	mul	r28, r19
 142:	c0 01       	movw	r24, r0
 144:	11 24       	eor	r1, r1
 146:	82 2b       	or	r24, r18
 148:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK();
 14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	
	
	
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	8f e1       	ldi	r24, 0x1F	; 31
 154:	9e e4       	ldi	r25, 0x4E	; 78
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_Init+0x4>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_Init+0xa>
 15c:	00 00       	nop

 
void LCD_Init(void)
{
		_delay_ms(20);	
		LCD_Busy();
 15e:	0e 94 56 00 	call	0xac	; 0xac <LCD_Busy>
		LCD_CTRL_dir |= (1<<RS_Switch) | (1<<RW_Switch) | (1<<Enable_Switch);
 162:	87 b3       	in	r24, 0x17	; 23
 164:	8e 60       	ori	r24, 0x0E	; 14
 166:	87 bb       	out	0x17, r24	; 23
		LCD_CTRL_PORTB &= ~((1<<RS_Switch) | (1<<RW_Switch) | (1<<Enable_Switch));
 168:	88 b3       	in	r24, 0x18	; 24
 16a:	81 7f       	andi	r24, 0xF1	; 241
 16c:	88 bb       	out	0x18, r24	; 24
		LCD_PORTA_dir = 0xFF;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a bb       	out	0x1a, r24	; 26
		LCD_clear_screen();
 172:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_clear_screen>
	
	#endif
	

	#ifdef FOUR_BIT_MODE
	LCD_Busy();
 176:	0e 94 56 00 	call	0xac	; 0xac <LCD_Busy>
	LCD_command_4bit(0x02);
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_command_4bit>
	LCD_command_4bit(four_bit_2line);
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_command_4bit>
 
	#endif
	
	Write_Command(Entry_mode);
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e 94 67 00 	call	0xce	; 0xce <Write_Command>
	Write_Command(Beginning_first_line);
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	0e 94 67 00 	call	0xce	; 0xce <Write_Command>
	Write_Command(Display_on_Curosr_blinking);
 192:	8f e0       	ldi	r24, 0x0F	; 15
 194:	0e 94 67 00 	call	0xce	; 0xce <Write_Command>
 198:	08 95       	ret

0000019a <main>:
	

//char name[] = "hassan";

int main(void)
{	// unsigned char x;
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	27 97       	sbiw	r28, 0x07	; 7
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 	LCD_Init();
 1ae:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Init>
 
	
	//USART Init
	USART_PinCfg UART_Pincfg ;
	UART_Pincfg.Data_Size = eight_bits;
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	8d 83       	std	Y+5, r24	; 0x05
	UART_Pincfg.Mode_of_Operation = Asynchronous;
 1b6:	1b 82       	std	Y+3, r1	; 0x03
	UART_Pincfg.Parity = Parity_Disable;
 1b8:	1c 82       	std	Y+4, r1	; 0x04
	UART_Pincfg.Stop_bits = Stop_1bit;
 1ba:	1e 82       	std	Y+6, r1	; 0x06
	UART_Pincfg.Baudrate = Baud_9600_N;  
 1bc:	89 e1       	ldi	r24, 0x19	; 25
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	9a 83       	std	Y+2, r25	; 0x02
 1c2:	89 83       	std	Y+1, r24	; 0x01
	UART_Pincfg.Baudrate = TX_RX_Transmit_AND_Receive;
 1c4:	88 e1       	ldi	r24, 0x18	; 24
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	9a 83       	std	Y+2, r25	; 0x02
 1ca:	89 83       	std	Y+1, r24	; 0x01
	USART_init( &UART_Pincfg);
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	0e 94 ef 00 	call	0x1de	; 0x1de <USART_init>
	 
	//Send message
 
  
	USART_SEND_String((uint8_t*)"HI,Iam hassan");
 1d4:	80 e6       	ldi	r24, 0x60	; 96
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 91 01 	call	0x322	; 0x322 <USART_SEND_String>
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <main+0x42>

000001de <USART_init>:


	while	( !( (UCSRA) & USART_UCSRA_RXC )) ; // check if the receiving buffer is empty or not
	return  UDR;
 
}  
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
 1e4:	87 e0       	ldi	r24, 0x07	; 7
 1e6:	fe 01       	movw	r30, r28
 1e8:	ae e6       	ldi	r26, 0x6E	; 110
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	01 90       	ld	r0, Z+
 1ee:	0d 92       	st	X+, r0
 1f0:	8a 95       	dec	r24
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <USART_init+0xe>
 1f4:	88 81       	ld	r24, Y
 1f6:	99 81       	ldd	r25, Y+1	; 0x01
 1f8:	99 b1       	in	r25, 0x09	; 9
 1fa:	89 2b       	or	r24, r25
 1fc:	89 b9       	out	0x09, r24	; 9
 1fe:	80 b5       	in	r24, 0x20	; 32
 200:	80 68       	ori	r24, 0x80	; 128
 202:	80 bd       	out	0x20, r24	; 32
 204:	8c 81       	ldd	r24, Y+4	; 0x04
 206:	81 11       	cpse	r24, r1
 208:	0a c0       	rjmp	.+20     	; 0x21e <USART_init+0x40>
 20a:	8a b1       	in	r24, 0x0a	; 10
 20c:	8b 7f       	andi	r24, 0xFB	; 251
 20e:	8a b9       	out	0x0a, r24	; 10
 210:	80 b5       	in	r24, 0x20	; 32
 212:	8d 7f       	andi	r24, 0xFD	; 253
 214:	80 bd       	out	0x20, r24	; 32
 216:	80 b5       	in	r24, 0x20	; 32
 218:	8b 7f       	andi	r24, 0xFB	; 251
 21a:	80 bd       	out	0x20, r24	; 32
 21c:	30 c0       	rjmp	.+96     	; 0x27e <USART_init+0xa0>
 21e:	8c 81       	ldd	r24, Y+4	; 0x04
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	51 f4       	brne	.+20     	; 0x238 <USART_init+0x5a>
 224:	8a b1       	in	r24, 0x0a	; 10
 226:	8b 7f       	andi	r24, 0xFB	; 251
 228:	8a b9       	out	0x0a, r24	; 10
 22a:	80 b5       	in	r24, 0x20	; 32
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	80 bd       	out	0x20, r24	; 32
 230:	80 b5       	in	r24, 0x20	; 32
 232:	8b 7f       	andi	r24, 0xFB	; 251
 234:	80 bd       	out	0x20, r24	; 32
 236:	23 c0       	rjmp	.+70     	; 0x27e <USART_init+0xa0>
 238:	8c 81       	ldd	r24, Y+4	; 0x04
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	51 f4       	brne	.+20     	; 0x252 <USART_init+0x74>
 23e:	8a b1       	in	r24, 0x0a	; 10
 240:	8b 7f       	andi	r24, 0xFB	; 251
 242:	8a b9       	out	0x0a, r24	; 10
 244:	80 b5       	in	r24, 0x20	; 32
 246:	8d 7f       	andi	r24, 0xFD	; 253
 248:	80 bd       	out	0x20, r24	; 32
 24a:	80 b5       	in	r24, 0x20	; 32
 24c:	84 60       	ori	r24, 0x04	; 4
 24e:	80 bd       	out	0x20, r24	; 32
 250:	16 c0       	rjmp	.+44     	; 0x27e <USART_init+0xa0>
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	39 f4       	brne	.+14     	; 0x266 <USART_init+0x88>
 258:	8a b1       	in	r24, 0x0a	; 10
 25a:	8b 7f       	andi	r24, 0xFB	; 251
 25c:	8a b9       	out	0x0a, r24	; 10
 25e:	80 b5       	in	r24, 0x20	; 32
 260:	86 60       	ori	r24, 0x06	; 6
 262:	80 bd       	out	0x20, r24	; 32
 264:	0c c0       	rjmp	.+24     	; 0x27e <USART_init+0xa0>
 266:	8c 81       	ldd	r24, Y+4	; 0x04
 268:	87 30       	cpi	r24, 0x07	; 7
 26a:	49 f4       	brne	.+18     	; 0x27e <USART_init+0xa0>
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	84 60       	ori	r24, 0x04	; 4
 270:	8a b9       	out	0x0a, r24	; 10
 272:	80 b5       	in	r24, 0x20	; 32
 274:	82 60       	ori	r24, 0x02	; 2
 276:	80 bd       	out	0x20, r24	; 32
 278:	80 b5       	in	r24, 0x20	; 32
 27a:	84 60       	ori	r24, 0x04	; 4
 27c:	80 bd       	out	0x20, r24	; 32
 27e:	8b 81       	ldd	r24, Y+3	; 0x03
 280:	81 11       	cpse	r24, r1
 282:	07 c0       	rjmp	.+14     	; 0x292 <USART_init+0xb4>
 284:	80 b5       	in	r24, 0x20	; 32
 286:	8f 7e       	andi	r24, 0xEF	; 239
 288:	80 bd       	out	0x20, r24	; 32
 28a:	80 b5       	in	r24, 0x20	; 32
 28c:	8f 7d       	andi	r24, 0xDF	; 223
 28e:	80 bd       	out	0x20, r24	; 32
 290:	13 c0       	rjmp	.+38     	; 0x2b8 <USART_init+0xda>
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	39 f4       	brne	.+14     	; 0x2a6 <USART_init+0xc8>
 298:	80 b5       	in	r24, 0x20	; 32
 29a:	8f 7e       	andi	r24, 0xEF	; 239
 29c:	80 bd       	out	0x20, r24	; 32
 29e:	80 b5       	in	r24, 0x20	; 32
 2a0:	80 62       	ori	r24, 0x20	; 32
 2a2:	80 bd       	out	0x20, r24	; 32
 2a4:	09 c0       	rjmp	.+18     	; 0x2b8 <USART_init+0xda>
 2a6:	8b 81       	ldd	r24, Y+3	; 0x03
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	31 f4       	brne	.+12     	; 0x2b8 <USART_init+0xda>
 2ac:	80 b5       	in	r24, 0x20	; 32
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	80 bd       	out	0x20, r24	; 32
 2b2:	80 b5       	in	r24, 0x20	; 32
 2b4:	80 62       	ori	r24, 0x20	; 32
 2b6:	80 bd       	out	0x20, r24	; 32
 2b8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ba:	81 11       	cpse	r24, r1
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <USART_init+0xe8>
 2be:	80 b5       	in	r24, 0x20	; 32
 2c0:	87 7f       	andi	r24, 0xF7	; 247
 2c2:	80 bd       	out	0x20, r24	; 32
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <USART_init+0xee>
 2c6:	80 b5       	in	r24, 0x20	; 32
 2c8:	88 60       	ori	r24, 0x08	; 8
 2ca:	80 bd       	out	0x20, r24	; 32
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	81 11       	cpse	r24, r1
 2d0:	0a c0       	rjmp	.+20     	; 0x2e6 <USART_init+0x108>
 2d2:	80 b5       	in	r24, 0x20	; 32
 2d4:	8f 7b       	andi	r24, 0xBF	; 191
 2d6:	80 bd       	out	0x20, r24	; 32
 2d8:	80 b5       	in	r24, 0x20	; 32
 2da:	8e 7f       	andi	r24, 0xFE	; 254
 2dc:	80 bd       	out	0x20, r24	; 32
 2de:	8b b1       	in	r24, 0x0b	; 11
 2e0:	8d 7f       	andi	r24, 0xFD	; 253
 2e2:	8b b9       	out	0x0b, r24	; 11
 2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <USART_init+0x114>
 2e6:	80 b5       	in	r24, 0x20	; 32
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	80 bd       	out	0x20, r24	; 32
 2ec:	8b b1       	in	r24, 0x0b	; 11
 2ee:	82 60       	ori	r24, 0x02	; 2
 2f0:	8b b9       	out	0x0b, r24	; 11
 2f2:	8e 81       	ldd	r24, Y+6	; 0x06
 2f4:	80 31       	cpi	r24, 0x10	; 16
 2f6:	21 f4       	brne	.+8      	; 0x300 <USART_init+0x122>
 2f8:	8a b1       	in	r24, 0x0a	; 10
 2fa:	80 61       	ori	r24, 0x10	; 16
 2fc:	8a b9       	out	0x0a, r24	; 10
 2fe:	0a c0       	rjmp	.+20     	; 0x314 <USART_init+0x136>
 300:	8e 81       	ldd	r24, Y+6	; 0x06
 302:	88 30       	cpi	r24, 0x08	; 8
 304:	21 f4       	brne	.+8      	; 0x30e <USART_init+0x130>
 306:	8a b1       	in	r24, 0x0a	; 10
 308:	88 60       	ori	r24, 0x08	; 8
 30a:	8a b9       	out	0x0a, r24	; 10
 30c:	03 c0       	rjmp	.+6      	; 0x314 <USART_init+0x136>
 30e:	8a b1       	in	r24, 0x0a	; 10
 310:	88 61       	ori	r24, 0x18	; 24
 312:	8a b9       	out	0x0a, r24	; 10
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <USART_SEND>:
 31a:	5d 9b       	sbis	0x0b, 5	; 11
 31c:	fe cf       	rjmp	.-4      	; 0x31a <USART_SEND>
 31e:	8c b9       	out	0x0c, r24	; 12
 320:	08 95       	ret

00000322 <USART_SEND_String>:
 * */



void USART_SEND_String(uint8_t* String)
{ 
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	ec 01       	movw	r28, r24
	while(*String)
 328:	03 c0       	rjmp	.+6      	; 0x330 <USART_SEND_String+0xe>
	{
		USART_SEND(*String);
 32a:	0e 94 8d 01 	call	0x31a	; 0x31a <USART_SEND>
		String++;
 32e:	21 96       	adiw	r28, 0x01	; 1



void USART_SEND_String(uint8_t* String)
{ 
	while(*String)
 330:	88 81       	ld	r24, Y
 332:	81 11       	cpse	r24, r1
 334:	fa cf       	rjmp	.-12     	; 0x32a <USART_SEND_String+0x8>
		String++;
	}
	
	
	
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
