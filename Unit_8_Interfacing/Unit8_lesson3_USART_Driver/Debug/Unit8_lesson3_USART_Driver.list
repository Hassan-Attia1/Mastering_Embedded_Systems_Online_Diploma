
Unit8_lesson3_USART_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000b14  08000b14  00010b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b3c  08000b3c  00010b44  2**0
                  CONTENTS
  4 .ARM          00000000  08000b3c  08000b3c  00010b44  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b3c  08000b44  00010b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b3c  08000b3c  00010b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b40  08000b40  00010b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000b44  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000b44  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b44  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040a9  00000000  00000000  00010b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a3e  00000000  00000000  00014c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a54  00000000  00000000  00015654  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  000160a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00016278  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000026e4  00000000  00000000  000163f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002503  00000000  00000000  00018ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009dcd  00000000  00000000  0001afd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024da4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000590  00000000  00000000  00024e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000afc 	.word	0x08000afc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000afc 	.word	0x08000afc

08000170 <EXTI0_IRQHandler>:
 * =============================================
 *
 */

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000020 	.word	0x20000020

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000020 	.word	0x20000020

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000020 	.word	0x20000020

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000020 	.word	0x20000020

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3


}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000020 	.word	0x20000020

08000224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<7)){EXTI->PR | (1<<7);    GPTF_IRQ_Callback[7]();}
	if(EXTI->PR & (1<<8)){EXTI->PR | (1<<8);    GPTF_IRQ_Callback[8]();}
	if(EXTI->PR & (1<<9)){EXTI->PR | (1<<9);    GPTF_IRQ_Callback[9]();}*/


	if(EXTI->PR & 1<< 5)
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<5;
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[5]();
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3

	}


	if(EXTI->PR & 1<< 6)
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<6;
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[6]();
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 7)
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<7;
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[7]();
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 8)
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<8;
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[8]();
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3

	}


	if(EXTI->PR & 1<< 9)
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
		{
			EXTI->PR |= 1<<9;
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
			GPTF_IRQ_Callback[9]();
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
		}




}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000020 	.word	0x20000020

080002cc <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0

*/



	if(EXTI->PR & 1<< 10)
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<10;
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[10]();
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 11)
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<11;
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[11]();
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 12)
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<12;
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[12]();
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 13)
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<13;
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[13]();
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3

	}


	if(EXTI->PR & 1<< 14)
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
	{
		EXTI->PR |= 1<<14;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[14]();
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 15)
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
	{
		EXTI->PR |= 1<<15;
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[15]();
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

	}


}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000020 	.word	0x20000020

08000390 <Get_CRLH_Position>:



#include "GPIO/stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t	PinNumber){
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]


	switch(PinNumber){
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <Get_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <Get_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <Get_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <Get_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <Get_CRLH_Position+0xba>


	case GPIO_PINS_0:
		return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_1:
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_2:
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_3:
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_4:
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_5:
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_6:
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_7:
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_8:
		return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_9:
		return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_10:
		return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_11:
		return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_12:
		return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_13:
		return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_14:
		return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_15:
		return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_Position+0xbc>


	}


	return 0;
 800044a:	2300      	movs	r3, #0




}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_INIT>:





void MCAL_GPIO_INIT (GPIO_typedef* GPIOx, GPIO_PinConfig_t* PinConfig){
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) : Configure pins from 0>>>7
	//Port configuration register low (GPIOx_CRH) : Configure pins from 8>>>15
	volatile	uint32_t* Config_Register = NULL;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_config = 0 ;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]
	// 0->7 CRL ... 8->15 CRH
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PINS_8)?	&GPIOx->CRL : &GPIOx->CRH;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d801      	bhi.n	8000474 <MCAL_GPIO_INIT+0x1e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	e001      	b.n	8000478 <MCAL_GPIO_INIT+0x22>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	60bb      	str	r3, [r7, #8]
	//clear clear CNF8[1:0] MODE8[1:0]
	(*Config_Register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_CRLH_Position>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	230f      	movs	r3, #15
 800048a:	4093      	lsls	r3, r2
 800048c:	43da      	mvns	r2, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	401a      	ands	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]

	//if pin configured as output
	if((PinConfig->GPIO_Pin_Config == GPIO_CONFIG_Output_PP)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Output_OD)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Alternate_Output_OD)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Alternate_Output_PP))
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b04      	cmp	r3, #4
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_INIT+0x62>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b05      	cmp	r3, #5
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_INIT+0x62>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	2b07      	cmp	r3, #7
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_INIT+0x62>
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b06      	cmp	r3, #6
 80004b6:	d11c      	bne.n	80004f2 <MCAL_GPIO_INIT+0x9c>
	{
		//(Mode - 4) = true configuration position in data sheet --> see @ref GPIO_CONFIG_define and datasheet difference
		Pin_config = ( ( ( (PinConfig->GPIO_Pin_Config - 4 ) << 2 ) | (PinConfig->GPIO_Mode_config)) & 0x0F );
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	73fb      	strb	r3, [r7, #15]
		(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80004d4:	7bfc      	ldrb	r4, [r7, #15]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff58 	bl	8000390 <Get_CRLH_Position>
 80004e0:	4603      	mov	r3, r0
 80004e2:	fa04 f203 	lsl.w	r2, r4, r3
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	431a      	orrs	r2, r3
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	e076      	b.n	80005e0 <MCAL_GPIO_INIT+0x18a>

	//if pin configured as input
	else
	{

		if((PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Floating_Input) || (PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Analog))
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d003      	beq.n	8000502 <MCAL_GPIO_INIT+0xac>
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d115      	bne.n	800052e <MCAL_GPIO_INIT+0xd8>
		{
			Pin_config = ((((PinConfig -> GPIO_Pin_Config) << 2) | (0)) & 0x0F );
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	789b      	ldrb	r3, [r3, #2]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	f003 030f 	and.w	r3, r3, #15
 800050e:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000510:	7bfc      	ldrb	r4, [r7, #15]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff3a 	bl	8000390 <Get_CRLH_Position>
 800051c:	4603      	mov	r3, r0
 800051e:	fa04 f203 	lsl.w	r2, r4, r3
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	431a      	orrs	r2, r3
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	e058      	b.n	80005e0 <MCAL_GPIO_INIT+0x18a>

		}
		else if((PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Input_PU)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Input_PD ))
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d003      	beq.n	800053e <MCAL_GPIO_INIT+0xe8>
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	789b      	ldrb	r3, [r3, #2]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d135      	bne.n	80005aa <MCAL_GPIO_INIT+0x154>
		{
			switch(PinConfig->GPIO_Pin_Config)
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	789b      	ldrb	r3, [r3, #2]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d002      	beq.n	800054c <MCAL_GPIO_INIT+0xf6>
 8000546:	2b03      	cmp	r3, #3
 8000548:	d00f      	beq.n	800056a <MCAL_GPIO_INIT+0x114>
 800054a:	e01f      	b.n	800058c <MCAL_GPIO_INIT+0x136>
			{
			case  GPIO_CONFIG_Input_PU :
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	8812      	ldrh	r2, [r2, #0]
 8000554:	431a      	orrs	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	60da      	str	r2, [r3, #12]
				Pin_config = (((PinConfig->GPIO_Pin_Config << 2 )|(0))&0x0F);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	789b      	ldrb	r3, [r3, #2]
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f003 030f 	and.w	r3, r3, #15
 8000566:	73fb      	strb	r3, [r7, #15]
				break;
 8000568:	e010      	b.n	800058c <MCAL_GPIO_INIT+0x136>
			case GPIO_CONFIG_Input_PD :
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	8812      	ldrh	r2, [r2, #0]
 8000572:	43d2      	mvns	r2, r2
 8000574:	401a      	ands	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	60da      	str	r2, [r3, #12]
				Pin_config = ((((PinConfig->GPIO_Pin_Config-1) << 2 )|(0))&0x0F);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	789b      	ldrb	r3, [r3, #2]
 800057e:	3b01      	subs	r3, #1
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	b2db      	uxtb	r3, r3
 8000584:	f003 030f 	and.w	r3, r3, #15
 8000588:	73fb      	strb	r3, [r7, #15]
				break;
 800058a:	bf00      	nop


			}

			( *Config_Register ) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 800058c:	7bfc      	ldrb	r4, [r7, #15]
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fefc 	bl	8000390 <Get_CRLH_Position>
 8000598:	4603      	mov	r3, r0
 800059a:	fa04 f203 	lsl.w	r2, r4, r3
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	431a      	orrs	r2, r3
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	e01a      	b.n	80005e0 <MCAL_GPIO_INIT+0x18a>

		}
		else if(PinConfig->GPIO_Pin_Config == GPIO_CONFIG_Alternate_Input)
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	789b      	ldrb	r3, [r3, #2]
 80005ae:	2b08      	cmp	r3, #8
 80005b0:	d116      	bne.n	80005e0 <MCAL_GPIO_INIT+0x18a>
		{ 	//pin is alternative input (same as input floating)
			Pin_config = ( (((PinConfig->GPIO_Pin_Config-7) << 2) | (0)) & 0x0F	);
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	789b      	ldrb	r3, [r3, #2]
 80005b6:	3b07      	subs	r3, #7
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 030f 	and.w	r3, r3, #15
 80005c0:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80005c2:	7bfc      	ldrb	r4, [r7, #15]
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fee1 	bl	8000390 <Get_CRLH_Position>
 80005ce:	4603      	mov	r3, r0
 80005d0:	fa04 f203 	lsl.w	r2, r4, r3
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	431a      	orrs	r2, r3
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	601a      	str	r2, [r3, #0]
	}

	 */


}
 80005de:	e7ff      	b.n	80005e0 <MCAL_GPIO_INIT+0x18a>
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd90      	pop	{r4, r7, pc}

080005e8 <MCAL_RCC_GETSYSCLKfreq>:
1111: SYSCLK divided by 512*/
const	uint16_t	AHBrescTable[16U] = 	{0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};


uint32_t	MCAL_RCC_GETSYSCLKfreq(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

	//we will use HSI as a system clock

	switch((RCC->CFGR >>2) & 0b11){
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MCAL_RCC_GETSYSCLKfreq+0x34>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	089b      	lsrs	r3, r3, #2
 80005f2:	f003 0303 	and.w	r3, r3, #3
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d006      	beq.n	8000608 <MCAL_RCC_GETSYSCLKfreq+0x20>
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d302      	bcc.n	8000604 <MCAL_RCC_GETSYSCLKfreq+0x1c>
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d004      	beq.n	800060c <MCAL_RCC_GETSYSCLKfreq+0x24>
 8000602:	e005      	b.n	8000610 <MCAL_RCC_GETSYSCLKfreq+0x28>
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: Not applicable

	case 0:
		return HSI_RC_CLK;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MCAL_RCC_GETSYSCLKfreq+0x38>)
 8000606:	e004      	b.n	8000612 <MCAL_RCC_GETSYSCLKfreq+0x2a>
		break;
	case 1:
		return HSE_CLK;//we need to calculate it ,so user should specify it how to use HSE
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MCAL_RCC_GETSYSCLKfreq+0x3c>)
 800060a:	e002      	b.n	8000612 <MCAL_RCC_GETSYSCLKfreq+0x2a>
		break;
	case 2:

		return 16000000;//we need to calculate it ,so user should specify it how to use PLLCK & PLLMUL & PLL MUX
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <MCAL_RCC_GETSYSCLKfreq+0x3c>)
 800060e:	e000      	b.n	8000612 <MCAL_RCC_GETSYSCLKfreq+0x2a>
		break;

	}
	return 0;
 8000610:	2300      	movs	r3, #0

}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000
 8000620:	007a1200 	.word	0x007a1200
 8000624:	00f42400 	.word	0x00f42400

08000628 <MCAL_RCC_GETHCLKfreq>:

uint32_t	MCAL_RCC_GETHCLKfreq(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return MCAL_RCC_GETSYSCLKfreq() >> AHBrescTable[(RCC->CFGR >> 4)&0xF];
 800062c:	f7ff ffdc 	bl	80005e8 <MCAL_RCC_GETSYSCLKfreq>
 8000630:	4601      	mov	r1, r0
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MCAL_RCC_GETHCLKfreq+0x24>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	091b      	lsrs	r3, r3, #4
 8000638:	f003 030f 	and.w	r3, r3, #15
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <MCAL_RCC_GETHCLKfreq+0x28>)
 800063e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000642:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000646:	4618      	mov	r0, r3
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	08000b1c 	.word	0x08000b1c

08000654 <MCAL_RCC_GETPCLK1Freq>:

uint32_t	MCAL_RCC_GETPCLK1Freq(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return	MCAL_RCC_GETHCLKfreq() >> APbrescTable[(RCC->CFGR >> 8) & 0b111]  ;
 8000658:	f7ff ffe6 	bl	8000628 <MCAL_RCC_GETHCLKfreq>
 800065c:	4601      	mov	r1, r0
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <MCAL_RCC_GETPCLK1Freq+0x20>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	f003 0307 	and.w	r3, r3, #7
 8000668:	4a03      	ldr	r2, [pc, #12]	; (8000678 <MCAL_RCC_GETPCLK1Freq+0x24>)
 800066a:	5cd3      	ldrb	r3, [r2, r3]
 800066c:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000670:	4618      	mov	r0, r3
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	08000b14 	.word	0x08000b14

0800067c <MCAL_RCC_GETPCLK2Freq>:
uint32_t 	MCAL_RCC_GETPCLK2Freq(void){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return	MCAL_RCC_GETHCLKfreq() >> APbrescTable[(RCC->CFGR >> 11) & 0b111]  ;
 8000680:	f7ff ffd2 	bl	8000628 <MCAL_RCC_GETHCLKfreq>
 8000684:	4601      	mov	r1, r0
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <MCAL_RCC_GETPCLK2Freq+0x20>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	0adb      	lsrs	r3, r3, #11
 800068c:	f003 0307 	and.w	r3, r3, #7
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <MCAL_RCC_GETPCLK2Freq+0x24>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
 8000694:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000698:	4618      	mov	r0, r3
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	08000b14 	.word	0x08000b14

080006a4 <MCAL_UART_Init>:




void MCAL_UART_Init(USART_typedef* USARTx, USART_Config* UART_Config)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]

	uint32_t pclk, BRR;

	GP_UART_config = UART_Config;
 80006ae:	4a57      	ldr	r2, [pc, #348]	; (800080c <MCAL_UART_Init+0x168>)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	6013      	str	r3, [r2, #0]

	//Enable the Clock for selected USART
	if(USARTx == USART1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a56      	ldr	r2, [pc, #344]	; (8000810 <MCAL_UART_Init+0x16c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d106      	bne.n	80006ca <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 80006bc:	4b55      	ldr	r3, [pc, #340]	; (8000814 <MCAL_UART_Init+0x170>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a54      	ldr	r2, [pc, #336]	; (8000814 <MCAL_UART_Init+0x170>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	e014      	b.n	80006f4 <MCAL_UART_Init+0x50>
	else if (USARTx == USART2)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a52      	ldr	r2, [pc, #328]	; (8000818 <MCAL_UART_Init+0x174>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d106      	bne.n	80006e0 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 80006d2:	4b50      	ldr	r3, [pc, #320]	; (8000814 <MCAL_UART_Init+0x170>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a4f      	ldr	r2, [pc, #316]	; (8000814 <MCAL_UART_Init+0x170>)
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	e009      	b.n	80006f4 <MCAL_UART_Init+0x50>
	else if (USARTx == USART3)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a4e      	ldr	r2, [pc, #312]	; (800081c <MCAL_UART_Init+0x178>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d105      	bne.n	80006f4 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 80006e8:	4b4a      	ldr	r3, [pc, #296]	; (8000814 <MCAL_UART_Init+0x170>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	4a49      	ldr	r2, [pc, #292]	; (8000814 <MCAL_UART_Init+0x170>)
 80006ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006f2:	61d3      	str	r3, [r2, #28]


	//Enable USART Module
	//	Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	60da      	str	r2, [r3, #12]

	//Enable USART Tx & Rx according
	//	Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	431a      	orrs	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	60da      	str	r2, [r3, #12]

	//Payload Width
	//	Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	7a12      	ldrb	r2, [r2, #8]
 8000716:	431a      	orrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	60da      	str	r2, [r3, #12]

	//Parity Enable & Width
	//	Bit 10 PCE: Parity control enable & Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	7a52      	ldrb	r2, [r2, #9]
 8000724:	431a      	orrs	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60da      	str	r2, [r3, #12]

	//number of Stop Bits
	//	Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->Stop_bits;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	7a92      	ldrb	r2, [r2, #10]
 8000732:	431a      	orrs	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	611a      	str	r2, [r3, #16]

	//Flow Control (CTS/RTS)
	//	Bit 9 CTSE: CTS enable & Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->Flow_Control;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	7ad2      	ldrb	r2, [r2, #11]
 8000740:	431a      	orrs	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	615a      	str	r2, [r3, #20]

	//Baud Rate Speed;

	//Getting Crystal Speed
	if(USARTx == USART1){
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a31      	ldr	r2, [pc, #196]	; (8000810 <MCAL_UART_Init+0x16c>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d103      	bne.n	8000756 <MCAL_UART_Init+0xb2>

		//PCLK2 for USART1
		pclk = MCAL_RCC_GETPCLK2Freq();
 800074e:	f7ff ff95 	bl	800067c <MCAL_RCC_GETPCLK2Freq>
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	e002      	b.n	800075c <MCAL_UART_Init+0xb8>

	}
	else
	{	//PCLK1 for USART2,3
		pclk = MCAL_RCC_GETPCLK1Freq();
 8000756:	f7ff ff7d 	bl	8000654 <MCAL_RCC_GETPCLK1Freq>
 800075a:	60f8      	str	r0, [r7, #12]

	}
	//baud rate calculation
	BRR = USART_BRR_Register(pclk,UART_Config->Baud_Rate);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	fbb2 f3f3 	udiv	r3, r2, r3
 8000768:	0119      	lsls	r1, r3, #4
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	4613      	mov	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	009a      	lsls	r2, r3, #2
 8000774:	441a      	add	r2, r3
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	fbb0 f3f3 	udiv	r3, r0, r3
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	fb00 f303 	mul.w	r3, r0, r3
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <MCAL_UART_Init+0x17c>)
 8000798:	fba2 2303 	umull	r2, r3, r2, r3
 800079c:	095b      	lsrs	r3, r3, #5
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	430b      	orrs	r3, r1
 80007a4:	60bb      	str	r3, [r7, #8]

	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV Bits & 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV

	USARTx->BRR = BRR;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	609a      	str	r2, [r3, #8]

	//USART IRQ Enbale & IRQ Call back

	if(UART_Config->IRQ_Enable != USART_IRQ_Disable){
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	7b1b      	ldrb	r3, [r3, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d026      	beq.n	8000802 <MCAL_UART_Init+0x15e>

		USARTx->CR1 |= UART_Config->IRQ_Enable;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	7b12      	ldrb	r2, [r2, #12]
 80007bc:	431a      	orrs	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60da      	str	r2, [r3, #12]


		//Enable NVIC For USARTx IRQ
		if(USARTx == USART1){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MCAL_UART_Init+0x16c>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <MCAL_UART_Init+0x134>

			NVIC_IRQ37_USART1_Enable;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MCAL_UART_Init+0x180>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <MCAL_UART_Init+0x180>)
 80007d0:	f043 0320 	orr.w	r3, r3, #32
 80007d4:	6013      	str	r3, [r2, #0]

	}



}
 80007d6:	e014      	b.n	8000802 <MCAL_UART_Init+0x15e>
		else if(USARTx == USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <MCAL_UART_Init+0x174>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d106      	bne.n	80007ee <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MCAL_UART_Init+0x180>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <MCAL_UART_Init+0x180>)
 80007e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	e009      	b.n	8000802 <MCAL_UART_Init+0x15e>
		else if(USARTx == USART3){
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a0a      	ldr	r2, [pc, #40]	; (800081c <MCAL_UART_Init+0x178>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d105      	bne.n	8000802 <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MCAL_UART_Init+0x180>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <MCAL_UART_Init+0x180>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6013      	str	r3, [r2, #0]
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000001c 	.word	0x2000001c
 8000810:	40013800 	.word	0x40013800
 8000814:	40021000 	.word	0x40021000
 8000818:	40004400 	.word	0x40004400
 800081c:	40004800 	.word	0x40004800
 8000820:	51eb851f 	.word	0x51eb851f
 8000824:	e000e104 	.word	0xe000e104

08000828 <MCAL_UART_SendData>:
					//	bit.
 * */


void MCAL_UART_SendData (USART_typedef* USARTx, uint16_t*pTxBuffer,enum Polling_mechanism PollingEnable)
{	//Wait until TXE flag is set in the SR	->SR: Status Register
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	4613      	mov	r3, r2
 8000834:	71fb      	strb	r3, [r7, #7]
	if(PollingEnable == Enable)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d106      	bne.n	800084a <MCAL_UART_SendData+0x22>
	{
		while(!	 (USARTx->SR & 1<<7 )	);
 800083c:	bf00      	nop
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f9      	beq.n	800083e <MCAL_UART_SendData+0x16>

	}else
	{

		//This is 8bit data transfer
		USARTx-> DR = (*pTxBuffer & (uint8_t)(0x0FF));
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	605a      	str	r2, [r3, #4]





}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
	...

08000860 <MCAL_UART_ReceiveData>:
					//	When receiving with the parity enabled, the value read in the MSB bit is the received parity
					//	bit.
 * */


void MCAL_UART_ReceiveData(USART_typedef* USARTx, uint16_t*pRxBuffer,enum Polling_mechanism PollingEnable){
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	4613      	mov	r3, r2
 800086c:	71fb      	strb	r3, [r7, #7]

	//Wait until RXNE flag is set in the SR
	if(PollingEnable == Enable){
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d106      	bne.n	8000882 <MCAL_UART_ReceiveData+0x22>

		while(!(USARTx->SR & 1<<5));
 8000874:	bf00      	nop
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f003 0320 	and.w	r3, r3, #32
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f9      	beq.n	8000876 <MCAL_UART_ReceiveData+0x16>


	}else // 8-bit payload length
	{
		//No parity so we consider all 8-bits are data
		if(GP_UART_config->Parity == USART_Parity_Type_None)
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MCAL_UART_ReceiveData+0x58>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	7a5b      	ldrb	r3, [r3, #9]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d107      	bne.n	800089c <MCAL_UART_ReceiveData+0x3c>
		{

			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	b29b      	uxth	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	801a      	strh	r2, [r3, #0]

	}



}
 800089a:	e007      	b.n	80008ac <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	801a      	strh	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	2000001c 	.word	0x2000001c

080008bc <MCAL_UART_GPIO_Set_Pins>:
 * @Note			-
 *					-Look @ GPIO configurations for device peripherals
 * */


void MCAL_UART_GPIO_Set_Pins(USART_typedef* USARTx){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]


	GPIO_PinConfig_t USART_PinCfg;
	if(USARTx == USART1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a2b      	ldr	r2, [pc, #172]	; (8000974 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d118      	bne.n	80008fe <MCAL_UART_GPIO_Set_Pins+0x42>
		//RX->PA10
		//CTS->PA11
		//RTS->PA12

		//TX->PA9
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_9;
 80008cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d0:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Output_PP;
 80008d2:	2306      	movs	r3, #6
 80008d4:	73bb      	strb	r3, [r7, #14]
		USART_PinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	4825      	ldr	r0, [pc, #148]	; (8000978 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008e2:	f7ff fdb8 	bl	8000456 <MCAL_GPIO_INIT>


		//RX->PA9
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_10;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Input;
 80008ec:	2308      	movs	r3, #8
 80008ee:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4820      	ldr	r0, [pc, #128]	; (8000978 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008f8:	f7ff fdad 	bl	8000456 <MCAL_GPIO_INIT>





}
 80008fc:	e036      	b.n	800096c <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART2){
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a1e      	ldr	r2, [pc, #120]	; (800097c <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d116      	bne.n	8000934 <MCAL_UART_GPIO_Set_Pins+0x78>
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_2;
 8000906:	2304      	movs	r3, #4
 8000908:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Output_PP;
 800090a:	2306      	movs	r3, #6
 800090c:	73bb      	strb	r3, [r7, #14]
		USART_PinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	4817      	ldr	r0, [pc, #92]	; (8000978 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800091a:	f7ff fd9c 	bl	8000456 <MCAL_GPIO_INIT>
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_3;
 800091e:	2308      	movs	r3, #8
 8000920:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Input;
 8000922:	2308      	movs	r3, #8
 8000924:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800092e:	f7ff fd92 	bl	8000456 <MCAL_GPIO_INIT>
}
 8000932:	e01b      	b.n	800096c <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART3){
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d117      	bne.n	800096c <MCAL_UART_GPIO_Set_Pins+0xb0>
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_10;
 800093c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000940:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Output_PP;
 8000942:	2306      	movs	r3, #6
 8000944:	73bb      	strb	r3, [r7, #14]
		USART_PinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 8000946:	2301      	movs	r3, #1
 8000948:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000952:	f7ff fd80 	bl	8000456 <MCAL_GPIO_INIT>
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_11;
 8000956:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800095a:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Input;
 800095c:	2308      	movs	r3, #8
 800095e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000968:	f7ff fd75 	bl	8000456 <MCAL_GPIO_INIT>
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40013800 	.word	0x40013800
 8000978:	40010800 	.word	0x40010800
 800097c:	40004400 	.word	0x40004400
 8000980:	40004800 	.word	0x40004800

08000984 <USART1_IRQHandler>:


//ISR FOR USARTx where x can be (1..3 depending on which USART will be used )


void USART1_IRQHandler(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0

	GP_UART_config->P_IRQ_Callback();
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <USART1_IRQHandler+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	4798      	blx	r3

}       			//USART1 global interrupt
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000001c 	.word	0x2000001c

08000998 <USART2_IRQHandler>:


void USART2_IRQHandler(void){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	GP_UART_config->P_IRQ_Callback();
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <USART2_IRQHandler+0x10>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	691b      	ldr	r3, [r3, #16]
 80009a2:	4798      	blx	r3

}       			// USART2 global interrupt
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000001c 	.word	0x2000001c

080009ac <USART3_IRQHandler>:



void USART3_IRQHandler(void){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	GP_UART_config->P_IRQ_Callback();
 80009b0:	4b02      	ldr	r3, [pc, #8]	; (80009bc <USART3_IRQHandler+0x10>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	4798      	blx	r3
}         			// USART3 global interrupt
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000001c 	.word	0x2000001c

080009c0 <init_clk>:
#include "Device_header/stm32f103x6.h"
#include "EXTI/stm32_F103C6_EXTI_driver.h"
#include "GPIO/stm32_F103C6_gpio_driver.h"
#include "USART/uart.h"

void init_clk(void){
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <init_clk+0x30>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <init_clk+0x30>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <init_clk+0x30>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <init_clk+0x30>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <init_clk+0x30>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <init_clk+0x30>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6193      	str	r3, [r2, #24]




}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	40021000 	.word	0x40021000

080009f4 <hassan_callback>:




unsigned char ch;
void hassan_callback(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

	MCAL_UART_ReceiveData(USART1, &ch, Disable);
 80009f8:	2201      	movs	r2, #1
 80009fa:	4905      	ldr	r1, [pc, #20]	; (8000a10 <hassan_callback+0x1c>)
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <hassan_callback+0x20>)
 80009fe:	f7ff ff2f 	bl	8000860 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, Enable);
 8000a02:	2200      	movs	r2, #0
 8000a04:	4902      	ldr	r1, [pc, #8]	; (8000a10 <hassan_callback+0x1c>)
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <hassan_callback+0x20>)
 8000a08:	f7ff ff0e 	bl	8000828 <MCAL_UART_SendData>




}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000060 	.word	0x20000060
 8000a14:	40013800 	.word	0x40013800

08000a18 <main>:



int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
	USART_Config uartCFG;

	init_clk();
 8000a1e:	f7ff ffcf 	bl	80009c0 <init_clk>
	 uartCFG.Baud_Rate = USART_BAUDRATE_115200;
 8000a22:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a26:	60bb      	str	r3, [r7, #8]
	 uartCFG.Flow_Control = USART_FLOW_CONTROL_None;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73fb      	strb	r3, [r7, #15]
	 uartCFG.IRQ_Enable = USART_IRQ_Enable_RXNEIE;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	743b      	strb	r3, [r7, #16]
	 uartCFG.Parity = USART_Parity_Type_None;
 8000a30:	2300      	movs	r3, #0
 8000a32:	737b      	strb	r3, [r7, #13]
	 uartCFG.Stop_bits = USART_STOP_Bits_one;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73bb      	strb	r3, [r7, #14]
	 uartCFG.Payload_Length = USART_8_DATA_Bits;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	733b      	strb	r3, [r7, #12]
	 uartCFG.USART_Mode = USART_MODE_TX_RX;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	713b      	strb	r3, [r7, #4]
	 uartCFG.P_IRQ_Callback = hassan_callback;
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <main+0x40>)
 8000a42:	617b      	str	r3, [r7, #20]
MCAL_UART_Init(USART1, &uartCFG);
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	4619      	mov	r1, r3
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <main+0x44>)
 8000a4a:	f7ff fe2b 	bl	80006a4 <MCAL_UART_Init>
MCAL_UART_GPIO_Set_Pins(USART1);
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <main+0x44>)
 8000a50:	f7ff ff34 	bl	80008bc <MCAL_UART_GPIO_Set_Pins>




    /* Loop forever */
while(1){
 8000a54:	e7fe      	b.n	8000a54 <main+0x3c>
 8000a56:	bf00      	nop
 8000a58:	080009f5 	.word	0x080009f5
 8000a5c:	40013800 	.word	0x40013800

08000a60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a62:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	; (8000aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <LoopForever+0xe>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	; (8000aac <LoopForever+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a8e:	f000 f811 	bl	8000ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a92:	f7ff ffc1 	bl	8000a18 <main>

08000a96 <LoopForever>:

LoopForever:
    b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   r0, =_estack
 8000a98:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000aa4:	08000b44 	.word	0x08000b44
  ldr r2, =_sbss
 8000aa8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000aac:	20000064 	.word	0x20000064

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <__libc_init_array>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	4e0c      	ldr	r6, [pc, #48]	; (8000aec <__libc_init_array+0x38>)
 8000aba:	4c0d      	ldr	r4, [pc, #52]	; (8000af0 <__libc_init_array+0x3c>)
 8000abc:	1ba4      	subs	r4, r4, r6
 8000abe:	10a4      	asrs	r4, r4, #2
 8000ac0:	42a5      	cmp	r5, r4
 8000ac2:	d109      	bne.n	8000ad8 <__libc_init_array+0x24>
 8000ac4:	f000 f81a 	bl	8000afc <_init>
 8000ac8:	2500      	movs	r5, #0
 8000aca:	4e0a      	ldr	r6, [pc, #40]	; (8000af4 <__libc_init_array+0x40>)
 8000acc:	4c0a      	ldr	r4, [pc, #40]	; (8000af8 <__libc_init_array+0x44>)
 8000ace:	1ba4      	subs	r4, r4, r6
 8000ad0:	10a4      	asrs	r4, r4, #2
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	d105      	bne.n	8000ae2 <__libc_init_array+0x2e>
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
 8000ad8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000adc:	4798      	blx	r3
 8000ade:	3501      	adds	r5, #1
 8000ae0:	e7ee      	b.n	8000ac0 <__libc_init_array+0xc>
 8000ae2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ae6:	4798      	blx	r3
 8000ae8:	3501      	adds	r5, #1
 8000aea:	e7f2      	b.n	8000ad2 <__libc_init_array+0x1e>
 8000aec:	08000b3c 	.word	0x08000b3c
 8000af0:	08000b3c 	.word	0x08000b3c
 8000af4:	08000b3c 	.word	0x08000b3c
 8000af8:	08000b40 	.word	0x08000b40

08000afc <_init>:
 8000afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afe:	bf00      	nop
 8000b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b02:	bc08      	pop	{r3}
 8000b04:	469e      	mov	lr, r3
 8000b06:	4770      	bx	lr

08000b08 <_fini>:
 8000b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0a:	bf00      	nop
 8000b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0e:	bc08      	pop	{r3}
 8000b10:	469e      	mov	lr, r3
 8000b12:	4770      	bx	lr
